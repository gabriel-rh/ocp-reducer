<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
<!ENTITY % sgml.features "IGNORE">
<!ENTITY % xml.features "INCLUDE">
<!ENTITY % DOCBOOK_ENTS PUBLIC "-//OASIS//ENTITIES DocBook Character Entities V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/dbcentx.mod">
%DOCBOOK_ENTS;
]>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
<info>
<title>Registry</title>
<date>2024-02-23</date>
<title>Registry</title>
<productname>OpenShift Container Platform</productname>
<productnumber>4.14</productnumber>
<subtitle>Enter a short description here.</subtitle>
<abstract>
    <para>A short overview and summary of the book's subject and purpose, traditionally no more than one paragraph long.</para>
</abstract>
<authorgroup>
    <orgname>Red Hat OpenShift Documentation Team</orgname>
</authorgroup>
<xi:include href="Common_Content/Legal_Notice.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
</info>
<chapter xml:id="registry-overview">
<title>OpenShift image registry overview</title>

<simpara>OpenShift Container Platform can build images from your source code, deploy them, and manage their lifecycle. It provides an internal, integrated container image registry that can be deployed in your OpenShift Container Platform environment to locally manage images. This overview contains reference information and links for registries commonly used with OpenShift Container Platform, with a focus on the OpenShift image registry.</simpara>
<section xml:id="openshift-registry-common-terms_registry-overview">
<title>Glossary of common terms for OpenShift image registry</title>
<simpara>This glossary defines the common terms that are used in the registry content.</simpara>
<variablelist>
<varlistentry>
<term>container</term>
<listitem>
<simpara>Lightweight and executable images that consist software and all its dependencies. Because containers virtualize the operating system, you can run containers in data center, a public or private cloud, or your local host.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Image Registry Operator</term>
<listitem>
<simpara>The Image Registry Operator runs in the <literal>openshift-image-registry</literal> namespace, and manages the registry instance in that location.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>image repository</term>
<listitem>
<simpara>An image repository is a collection of related container images and tags identifying images.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>mirror registry</term>
<listitem>
<simpara>The mirror registry is a registry that holds the mirror of OpenShift Container Platform images.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>namespace</term>
<listitem>
<simpara>A namespace isolates groups of resources within a single cluster.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>pod</term>
<listitem>
<simpara>The pod is the smallest logical unit in Kubernetes. A pod is comprised of one or more containers to run in a worker node.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>private registry</term>
<listitem>
<simpara>A registry is a server that implements the container image registry API. A private registry is a registry that requires authentication to allow users access its contents.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>public registry</term>
<listitem>
<simpara>A registry is a server that implements the container image registry API. A public registry is a registry that serves its contently publicly.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Quay.io</term>
<listitem>
<simpara>A public Red Hat Quay Container Registry instance provided and maintained by Red Hat, that serves most of the container images and Operators to OpenShift Container Platform clusters.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>OpenShift image registry</term>
<listitem>
<simpara>OpenShift image registry is the registry provided by OpenShift Container Platform to manage images.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>registry authentication</term>
<listitem>
<simpara>To push and pull images to and from private image repositories, the registry needs to authenticate its users with credentials.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>route</term>
<listitem>
<simpara>Exposes a service to allow for network access to pods from users and applications outside the OpenShift Container Platform instance.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>scale down</term>
<listitem>
<simpara>To decrease the number of replicas.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>scale up</term>
<listitem>
<simpara>To increase the number of replicas.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>service</term>
<listitem>
<simpara>A service exposes a running application on a set of pods.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="registry-integrated-openshift-registry_registry-overview">
<title>Integrated OpenShift image registry</title>
<simpara>OpenShift Container Platform provides a built-in container image registry that runs as a
standard workload on the cluster. The registry is configured and managed by an
infrastructure Operator. It provides an out-of-the-box solution for users to
manage the images that run their workloads, and runs on top of the existing
cluster infrastructure. This registry can be scaled up or down like any other
cluster workload and does not require specific infrastructure provisioning. In
addition, it is integrated into the cluster user authentication and
authorization system, which means that access to create and retrieve images is
controlled by defining user permissions on the image resources.</simpara>
<simpara>The registry is typically used as a publication target for images built on the
cluster, as well as being a source of images for workloads running on the cluster.
When a new image is pushed to the registry, the cluster is notified of the
new image and other components can react to and consume the updated image.</simpara>
<simpara>Image data is stored in two locations. The actual image data is stored in a
configurable storage location, such as cloud storage or a filesystem volume. The
image metadata, which is exposed by the standard cluster APIs and is used to
perform access control, is stored as standard API resources, specifically images
and imagestreams.</simpara>
<itemizedlist role="_additional-resources">
<title>Additional resources</title>
<listitem>
<simpara><link linkend="configuring-registry-operator">Image Registry Operator in OpenShift Container Platform</link></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="registry-third-party-registries_registry-overview">
<title>Third-party registries</title>
<simpara>OpenShift Container Platform can create containers using images from third-party registries, but it is unlikely that these registries offer the same image notification support as the integrated OpenShift image registry. In this situation, OpenShift Container Platform will fetch tags from the remote registry upon imagestream creation. To refresh the fetched tags, run <literal>oc import-image &lt;stream&gt;</literal>. When new images are detected, the previously described build and deployment reactions occur.</simpara>
<section xml:id="authentication_registry-overview">
<title>Authentication</title>
<simpara>OpenShift Container Platform can communicate with registries to access private image repositories using credentials supplied by the user. This allows OpenShift Container Platform to push and pull images to and from private repositories.</simpara>
<section xml:id="registry-authentication_registry-overview">
<title>Registry authentication with Podman</title>
<simpara>Some container image registries require access authorization. Podman is an open source tool for managing containers and container images and interacting with image registries. You can use Podman to authenticate your credentials, pull the registry image, and store local images in a local file system. The following is a generic example of authenticating the registry with Podman.</simpara>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Use the <link xlink:href="https://catalog.redhat.com/software/containers/explore">Red Hat Ecosystem Catalog</link> to search for specific container images from the Red Hat Repository and select the required image.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Get this image</emphasis> to find the command for your container image.</simpara>
</listitem>
<listitem>
<simpara>Log in by running the following command and entering your username and password to authenticate:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ podman login registry.redhat.io
 Username:&lt;your_registry_account_username&gt;
 Password:&lt;your_registry_account_password&gt;</programlisting>
</listitem>
<listitem>
<simpara>Download the image and save it locally by running the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ podman pull registry.redhat.io/&lt;repository_name&gt;</programlisting>
</listitem>
</orderedlist>
</section>
</section>
</section>
<section xml:id="registry-quay-overview_registry-overview">
<title>Red Hat Quay registries</title>
<simpara>If you need an enterprise-quality container image registry, Red Hat Quay is
available both as a hosted service and as software you can install in your own
data center or cloud environment. Advanced features in Red Hat Quay
include geo-replication, image scanning, and the ability to roll back images.</simpara>
<simpara>Visit the <link xlink:href="https://quay.io">Quay.io</link> site to set up your own hosted Quay registry account. After
that, follow the Quay Tutorial to log in to the Quay registry and start managing
your images.</simpara>
<simpara>You can access your Red Hat Quay registry from OpenShift Container Platform like any remote
container image registry.</simpara>
<itemizedlist role="_additional-resources">
<title>Additional resources</title>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_quay/">Red Hat Quay product documentation</link></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="registry-authentication-enabled-registry-overview_registry-overview">
<title>Authentication enabled Red Hat registry</title>
<simpara>All container images available through the Container images section of the Red Hat Ecosystem Catalog are hosted
on an image registry, <literal>registry.redhat.io</literal>.</simpara>
<simpara>The registry, <literal>registry.redhat.io</literal>, requires authentication for access to
images and hosted content on OpenShift Container Platform. Following the move to the new
registry, the existing registry will be available for a period of time.</simpara>
<note>
<simpara>OpenShift Container Platform pulls images from <literal>registry.redhat.io</literal>, so you must configure
your cluster to use it.</simpara>
</note>
<simpara>The new registry uses standard OAuth mechanisms for authentication,
with the following methods:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Authentication token.</emphasis>  Tokens, which are generated by administrators,
are service accounts that give systems the ability to authenticate against the
container image registry.
Service accounts are not affected by changes in user accounts, so the token
authentication method is reliable and resilient. This is the only supported
authentication option for production clusters.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Web username and password.</emphasis> This is the standard set of credentials you use
to log in to resources such as <literal>access.redhat.com</literal>.
While it is possible to use this authentication method with OpenShift Container Platform, it
is not supported for production deployments. Restrict this authentication method
to stand-alone projects outside OpenShift Container Platform.</simpara>
</listitem>
</itemizedlist>
<simpara>You can use <literal>podman login</literal> with your credentials, either username and password
or authentication token, to access content on the new registry.</simpara>
<simpara>All imagestreams point to the new registry, which uses the installation pull secret to authenticate.</simpara>
<simpara>You must place your credentials in either of the following places:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong"><literal>openshift</literal> namespace</emphasis>. Your credentials must exist in the <literal>openshift</literal>
namespace so that the imagestreams in the <literal>openshift</literal> namespace can import.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Your host</emphasis>. Your credentials must exist on your host because Kubernetes
uses the credentials from your host when it goes to pull images.</simpara>
</listitem>
</itemizedlist>
<itemizedlist role="_additional-resources">
<title>Additional resources</title>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/terms-based-registry/">Registry service accounts</link></simpara>
</listitem>
</itemizedlist>
</section>
</chapter>
<chapter xml:id="configuring-registry-operator">
<title>Image Registry Operator in OpenShift Container Platform</title>

<section xml:id="image-registry-on-cloud">
<title>Image Registry on cloud platforms and OpenStack</title>
<simpara>The Image Registry Operator installs a single instance of the OpenShift image registry, and manages all registry configuration, including setting up registry storage.</simpara>
<note>
<simpara>Storage is only automatically configured when you install an installer-provisioned infrastructure cluster on AWS, Azure, GCP, IBM&#174;, or OpenStack.</simpara>
<simpara>When you install or upgrade an installer-provisioned infrastructure cluster on AWS, Azure, GCP, IBM&#174;, or OpenStack, the Image Registry Operator sets the <literal>spec.storage.managementState</literal> parameter to <literal>Managed</literal>. If the <literal>spec.storage.managementState</literal> parameter is set to <literal>Unmanaged</literal>, the Image Registry Operator takes no action related to storage.</simpara>
</note>
<simpara>After the control plane deploys, the Operator creates a default <literal>configs.imageregistry.operator.openshift.io</literal> resource instance based on configuration detected in the cluster.</simpara>
<simpara>If insufficient information is available to define a complete <literal>configs.imageregistry.operator.openshift.io</literal> resource, the incomplete resource is defined and the Operator updates the resource status with information about what is missing.</simpara>
<simpara>The Image Registry Operator runs in the <literal>openshift-image-registry</literal> namespace, and manages the registry instance in that location as well. All configuration and workload resources for the registry reside in that namespace.</simpara>
<important>
<simpara>The Image Registry Operator&#8217;s behavior for managing the pruner is orthogonal to the <literal>managementState</literal> specified on the <literal>ClusterOperator</literal> object for the Image Registry Operator. If the Image Registry Operator is not in the <literal>Managed</literal> state, the image pruner can still be configured and managed by the <literal>Pruning</literal> custom resource.</simpara>
<simpara>However, the <literal>managementState</literal> of the Image Registry Operator alters the behavior of the deployed image pruner job:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>Managed</literal>: the <literal>--prune-registry</literal> flag for the image pruner is set to <literal>true</literal>.</simpara>
</listitem>
<listitem>
<simpara><literal>Removed</literal>: the <literal>--prune-registry</literal> flag for the image pruner is set to <literal>false</literal>, meaning it only prunes image metatdata in etcd.</simpara>
</listitem>
</itemizedlist>
</important>
</section>
<section xml:id="image-registry-on-bare-metal-vsphere">
<title>Image Registry on bare metal, Nutanix, and vSphere</title>
<section xml:id="registry-removed_configuring-registry-operator">
<title>Image registry removed during installation</title>
<simpara>On platforms that do not provide shareable object storage, the OpenShift Image Registry Operator bootstraps itself as <literal>Removed</literal>. This allows <literal>openshift-installer</literal> to complete installations on these platform types.</simpara>
<simpara>After installation, you must edit the Image Registry Operator configuration to switch the <literal>managementState</literal> from <literal>Removed</literal> to <literal>Managed</literal>.</simpara>
</section>
</section>
<section xml:id="registry-operator-distribution-across-availability-zones_configuring-registry-operator">
<title>Image Registry Operator distribution across availability zones</title>
<simpara>The default configuration of the Image Registry Operator spreads image registry pods across topology zones to prevent delayed recovery times in case of a complete zone failure where all pods are impacted.</simpara>
<simpara>The Image Registry Operator defaults to the following when deployed with a zone-related topology constraint:</simpara>
<formalpara>
<title>Image Registry Operator deployed with a zone related topology constraint</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">  topologySpreadConstraints:
  - labelSelector:
      matchLabels:
        docker-registry: default
    maxSkew: 1
    topologyKey: kubernetes.io/hostname
    whenUnsatisfiable: DoNotSchedule
  - labelSelector:
      matchLabels:
        docker-registry: default
    maxSkew: 1
    topologyKey: node-role.kubernetes.io/worker
    whenUnsatisfiable: DoNotSchedule
  - labelSelector:
      matchLabels:
        docker-registry: default
    maxSkew: 1
    topologyKey: topology.kubernetes.io/zone
    whenUnsatisfiable: DoNotSchedule</programlisting>
</para>
</formalpara>
<simpara>The Image Registry Operator defaults to the following when deployed without a zone-related topology constraint, which applies to bare metal and vSphere instances:</simpara>
<formalpara>
<title>Image Registry Operator deployed without a zone related topology constraint</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered"> topologySpreadConstraints:
  - labelSelector:
      matchLabels:
        docker-registry: default
    maxSkew: 1
    topologyKey: kubernetes.io/hostname
    whenUnsatisfiable: DoNotSchedule
  - labelSelector:
      matchLabels:
        docker-registry: default
    maxSkew: 1
    topologyKey: node-role.kubernetes.io/worker
    whenUnsatisfiable: DoNotSchedule</programlisting>
</para>
</formalpara>
<simpara>A cluster administrator can override the default <literal>topologySpreadConstraints</literal> by configuring the <literal>configs.imageregistry.operator.openshift.io/cluster</literal> spec file. In that case, only the constraints you provide apply.</simpara>
</section>
<section xml:id="_additional-resources" role="_additional-resources">
<title>Additional resources</title>
<itemizedlist>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/openshift_container_platform/4.14/html-single/nodes/#nodes-scheduler-pod-topology-spread-constraints">Configuring pod topology spread constraints</link></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="registry-operator-configuration-resource-overview_configuring-registry-operator">
<title>Image Registry Operator configuration parameters</title>
<simpara>The <literal>configs.imageregistry.operator.openshift.io</literal> resource offers the following
configuration parameters.</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="27.2727*"/>
<colspec colname="col_2" colwidth="72.7273*"/>
<thead>
<row>
<entry align="left" valign="top">Parameter</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>managementState</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Managed</literal>: The Operator updates the registry as configuration resources
are updated.</simpara>
<simpara><literal>Unmanaged</literal>: The Operator ignores changes to the configuration resources.</simpara>
<simpara><literal>Removed</literal>: The Operator removes the registry instance and tear down any
storage that the Operator provisioned.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>logLevel</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Sets <literal>logLevel</literal> of the registry instance. Defaults to  <literal>Normal</literal>.</simpara>
<simpara>The following values for <literal>logLevel</literal> are supported:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>Normal</literal></simpara>
</listitem>
<listitem>
<simpara><literal>Debug</literal></simpara>
</listitem>
<listitem>
<simpara><literal>Trace</literal></simpara>
</listitem>
<listitem>
<simpara><literal>TraceAll</literal></simpara>
</listitem>
</itemizedlist></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>httpSecret</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Value needed by the registry to secure uploads, generated by default.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>operatorLogLevel</literal></simpara></entry>
<entry align="left" valign="top"><simpara>The <literal>operatorLogLevel</literal> configuration parameter provides intent-based logging for the Operator itself and a simple way to manage coarse-grained logging choices that Operators must interpret for themselves. This configuration parameter defaults to <literal>Normal</literal>. It does not provide fine-grained control.</simpara>
<simpara>The following values for <literal>operatorLogLevel</literal> are supported:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>Normal</literal></simpara>
</listitem>
<listitem>
<simpara><literal>Debug</literal></simpara>
</listitem>
<listitem>
<simpara><literal>Trace</literal></simpara>
</listitem>
<listitem>
<simpara><literal>TraceAll</literal></simpara>
</listitem>
</itemizedlist></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>proxy</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Defines the Proxy to be used when calling master API
and upstream registries.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>storage</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>Storagetype</literal>: Details for configuring registry storage, for example S3 bucket
coordinates. Normally configured by default.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>readOnly</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Indicates whether the registry instance should reject attempts to push new images or delete existing ones.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>requests</literal></simpara></entry>
<entry align="left" valign="top"><simpara>API Request Limit details. Controls how many parallel requests a given registry
instance will handle before queuing additional requests.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>defaultRoute</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Determines whether or not an external route is defined using the default
hostname. If enabled, the route uses re-encrypt encryption. Defaults to <literal>false</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>routes</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Array of additional routes to create. You provide the hostname and certificate
for the route.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>rolloutStrategy</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Defines rollout strategy for the image registry deployment. Defaults to <literal>RollingUpdate</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>replicas</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Replica count for the registry.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>disableRedirect</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Controls whether to route all data through the registry, rather than redirecting to the back end. Defaults to <literal>false</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>spec.storage.managementState</literal></simpara></entry>
<entry align="left" valign="top"><simpara>The Image Registry Operator sets the <literal>spec.storage.managementState</literal> parameter to <literal>Managed</literal> on new installations or upgrades of clusters using installer-provisioned infrastructure on AWS or Azure.</simpara>
<itemizedlist>
<listitem>
<simpara><literal>Managed</literal>: Determines that the Image Registry Operator manages underlying storage. If the Image Registry Operator&#8217;s <literal>managementState</literal> is set to <literal>Removed</literal>, then the storage is deleted.</simpara>
<itemizedlist>
<listitem>
<simpara>If the <literal>managementState</literal> is set to <literal>Managed</literal>, the Image Registry Operator attempts to apply some default configuration on the underlying storage unit. For example, if set to <literal>Managed</literal>, the Operator tries to enable encryption on the S3 bucket before making it available to the registry. If you do not want the default settings to be applied on the storage you are providing, make sure the <literal>managementState</literal> is set to <literal>Unmanaged</literal>.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara><literal>Unmanaged</literal>: Determines that the Image Registry Operator ignores the storage settings. If the Image Registry Operator&#8217;s <literal>managementState</literal> is set to <literal>Removed</literal>, then the storage is not deleted. If you provided an underlying storage unit configuration, such as a bucket or container name, and the <literal>spec.storage.managementState</literal> is not yet set to any value, then the Image Registry Operator configures it to <literal>Unmanaged</literal>.</simpara>
</listitem>
</itemizedlist></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="registry-operator-default-crd_configuring-registry-operator">
<title>Enable the Image Registry default route with the Custom Resource Definition</title>
<simpara>In OpenShift Container Platform, the <literal>Registry</literal> Operator controls the OpenShift image registry feature. The
Operator is defined by the <literal>configs.imageregistry.operator.openshift.io</literal> Custom
Resource Definition (CRD).</simpara>
<simpara>If you need to automatically enable the Image Registry default route, patch the
Image Registry Operator CRD.</simpara>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>Patch the Image Registry Operator CRD:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc patch configs.imageregistry.operator.openshift.io/cluster --type merge -p '{"spec":{"defaultRoute":true}}'</programlisting>
</listitem>
</itemizedlist>
</section>
<section xml:id="images-configuration-cas_configuring-registry-operator">
<title>Configuring additional trust stores for image registry access</title>
<simpara>The <literal>image.config.openshift.io/cluster</literal> custom resource can contain a reference to a config map that contains additional certificate authorities to be trusted during image registry access.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>The certificate authorities (CA) must be PEM-encoded.</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Procedure</title>
<para>You can create a config map in the <literal>openshift-config</literal> namespace and use its name in <literal>AdditionalTrustedCA</literal> in the <literal>image.config.openshift.io</literal> custom resource to provide additional CAs that should be trusted when contacting external registries.</para>
</formalpara>
<simpara>The config map key is the hostname of a registry with the port for which this CA is to be trusted, and the PEM certificate content is the value, for each additional registry CA to trust.</simpara>
<formalpara>
<title>Image registry CA config map example</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">apiVersion: v1
kind: ConfigMap
metadata:
  name: my-registry-ca
data:
  registry.example.com: |
    -----BEGIN CERTIFICATE-----
    ...
    -----END CERTIFICATE-----
  registry-with-port.example.com..5000: | <co xml:id="CO1-1"/>
    -----BEGIN CERTIFICATE-----
    ...
    -----END CERTIFICATE-----</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO1-1">
<para>If the registry has the port, such as <literal>registry-with-port.example.com:5000</literal>, <literal>:</literal> should be replaced with <literal>..</literal>.</para>
</callout>
</calloutlist>
<simpara>You can configure additional CAs with the following procedure.</simpara>
<itemizedlist>
<listitem>
<simpara>To configure an additional CA:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc create configmap registry-config --from-file=&lt;external_registry_address&gt;=ca.crt -n openshift-config</programlisting>
<programlisting language="terminal" linenumbering="unnumbered">$ oc edit image.config.openshift.io cluster</programlisting>
<programlisting language="yaml" linenumbering="unnumbered">spec:
  additionalTrustedCA:
    name: registry-config</programlisting>
</listitem>
</itemizedlist>
</section>
<section xml:id="registry-operator-config-resources-storage-credentials_configuring-registry-operator">
<title>Configuring storage credentials for the Image Registry Operator</title>
<simpara>In addition to the <literal>configs.imageregistry.operator.openshift.io</literal> and ConfigMap
resources, storage credential configuration is provided to the Operator by a separate secret
resource located within the <literal>openshift-image-registry</literal> namespace.</simpara>
<simpara>The <literal>image-registry-private-configuration-user</literal> secret provides
credentials needed for storage access and management. It overrides the default
credentials used by the Operator, if default credentials were found.</simpara>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>Create an OpenShift Container Platform secret that contains the required keys.</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc create secret generic image-registry-private-configuration-user --from-literal=KEY1=value1 --from-literal=KEY2=value2 --namespace openshift-image-registry</programlisting>
</listitem>
</itemizedlist>
</section>
<section xml:id="_additional-resources-2" role="_additional-resources">
<title>Additional resources</title>
<itemizedlist>
<listitem>
<simpara><link linkend="configuring-registry-storage-aws-user-infrastructure">Configuring the registry for AWS user-provisioned infrastructure</link></simpara>
</listitem>
<listitem>
<simpara><link linkend="configuring-registry-storage-gcp-user-infrastructure">Configuring the registry for GCP user-provisioned infrastructure</link></simpara>
</listitem>
<listitem>
<simpara><link linkend="configuring-registry-storage-azure-user-infrastructure">Configuring the registry for Azure user-provisioned infrastructure</link></simpara>
</listitem>
<listitem>
<simpara><link linkend="configuring-registry-storage-baremetal">Configuring the registry for bare metal</link></simpara>
</listitem>
<listitem>
<simpara><link linkend="configuring-registry-storage-vsphere">Configuring the registry for vSphere</link></simpara>
</listitem>
</itemizedlist>
</section>
</chapter>
<chapter xml:id="_setting-up-and-configuring-the-registry">
<title>Setting up and configuring the registry</title>
<section xml:id="configuring-registry-storage-aws-user-infrastructure">
<title>Configuring the registry for AWS user-provisioned infrastructure</title>

<section xml:id="registry-operator-config-resources-secret-aws_configuring-registry-storage-aws-user-infrastructure">
<title>Configuring a secret for the Image Registry Operator</title>
<simpara>In addition to the <literal>configs.imageregistry.operator.openshift.io</literal> and ConfigMap
resources, configuration is provided to the Operator by a separate secret
resource located within the <literal>openshift-image-registry</literal> namespace.</simpara>
<simpara>The <literal>image-registry-private-configuration-user</literal> secret provides
credentials needed for storage access and management. It overrides the default
credentials used by the Operator, if default credentials were found.</simpara>
<simpara>For S3 on AWS storage, the secret is expected to contain two keys:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>REGISTRY_STORAGE_S3_ACCESSKEY</literal></simpara>
</listitem>
<listitem>
<simpara><literal>REGISTRY_STORAGE_S3_SECRETKEY</literal></simpara>
</listitem>
</itemizedlist>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>Create an OpenShift Container Platform secret that contains the required keys.</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc create secret generic image-registry-private-configuration-user --from-literal=REGISTRY_STORAGE_S3_ACCESSKEY=myaccesskey --from-literal=REGISTRY_STORAGE_S3_SECRETKEY=mysecretkey --namespace openshift-image-registry</programlisting>
</listitem>
</itemizedlist>
</section>
<section xml:id="registry-configuring-storage-aws-user-infra_configuring-registry-storage-aws-user-infrastructure">
<title>Configuring registry storage for AWS with user-provisioned infrastructure</title>
<simpara>During installation, your cloud credentials are sufficient to create an Amazon S3 bucket
and the Registry Operator will automatically configure storage.</simpara>
<simpara>If the Registry Operator cannot create an S3 bucket and automatically configure
storage, you can create an S3 bucket and configure storage with the following
procedure.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have a cluster on AWS with user-provisioned infrastructure.</simpara>
</listitem>
<listitem>
<simpara>For Amazon S3 storage, the secret is expected to contain two keys:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>REGISTRY_STORAGE_S3_ACCESSKEY</literal></simpara>
</listitem>
<listitem>
<simpara><literal>REGISTRY_STORAGE_S3_SECRETKEY</literal></simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<formalpara>
<title>Procedure</title>
<para>Use the following procedure if the Registry Operator cannot create an S3 bucket
and automatically configure storage.</para>
</formalpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Set up a <link xlink:href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config">Bucket Lifecycle Policy</link>
to abort incomplete multipart uploads that are one day old.</simpara>
</listitem>
<listitem>
<simpara>Fill in the storage configuration in
<literal>configs.imageregistry.operator.openshift.io/cluster</literal>:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc edit configs.imageregistry.operator.openshift.io/cluster</programlisting>
<formalpara>
<title>Example configuration</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">storage:
  s3:
    bucket: &lt;bucket-name&gt;
    region: &lt;region-name&gt;</programlisting>
</para>
</formalpara>
</listitem>
</orderedlist>
<warning>
<simpara>To secure your registry images in AWS, <link xlink:href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-publicaccessblockconfiguration.html">block public access</link>
to the S3 bucket.</simpara>
</warning>
</section>
<section xml:id="registry-operator-configuration-resource-overview-aws-s3_configuring-registry-storage-aws-user-infrastructure">
<title>Image Registry Operator configuration parameters for AWS S3</title>
<simpara>The following configuration parameters are available for AWS S3 registry storage.</simpara>
<simpara>The image registry <literal>spec.storage.s3</literal> configuration parameter holds the information to configure the registry to use the AWS S3 service for back-end storage. See the <link xlink:href="https://docs.docker.com/registry/storage-drivers/s3/">S3 storage driver documentation</link> for more information.</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="27.2727*"/>
<colspec colname="col_2" colwidth="72.7273*"/>
<thead>
<row>
<entry align="left" valign="top">Parameter</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>bucket</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Bucket is the bucket name in which you want to store the registry&#8217;s data.
It is optional and is generated if not provided.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>region</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Region is the AWS region in which your bucket exists. It is optional and is
set based on the installed AWS Region.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>regionEndpoint</literal></simpara></entry>
<entry align="left" valign="top"><simpara>RegionEndpoint is the endpoint for S3 compatible storage services.
It is optional and defaults based on the Region that is provided.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>virtualHostedStyle</literal></simpara></entry>
<entry align="left" valign="top"><simpara>VirtualHostedStyle enables using S3 virtual hosted style bucket paths with a custom RegionEndpoint. It is optional and defaults to false.</simpara>
<simpara>Set this parameter to deploy OpenShift Container Platform to hidden regions.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>encrypt</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Encrypt specifies whether or not the registry stores the image in encrypted format.
It is optional and defaults to false.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>keyID</literal></simpara></entry>
<entry align="left" valign="top"><simpara>KeyID is the KMS key ID to use for encryption. It is optional. Encrypt must be
true, or this parameter is ignored.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>cloudFront</literal></simpara></entry>
<entry align="left" valign="top"><simpara>CloudFront configures Amazon Cloudfront as the storage middleware in a registry.
It is optional.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>trustedCA</literal></simpara></entry>
<entry align="left" valign="top"><simpara>The namespace for the config map referenced by <literal>trustedCA</literal> is <literal>openshift-config</literal>. The key for the bundle in the config map is <literal>ca-bundle.crt</literal>. It is optional.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<note>
<simpara>When the value of the <literal>regionEndpoint</literal> parameter is configured to a URL of a Rados Gateway, an explicit port must not be specified. For example:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">regionEndpoint: http://rook-ceph-rgw-ocs-storagecluster-cephobjectstore.openshift-storage.svc.cluster.local</programlisting>
</note>
</section>
</section>
<section xml:id="configuring-registry-storage-gcp-user-infrastructure">
<title>Configuring the registry for GCP user-provisioned infrastructure</title>

<section xml:id="registry-operator-config-resources-secret-gcp_configuring-registry-storage-gcp-user-infrastructure">
<title>Configuring a secret for the Image Registry Operator</title>
<simpara>In addition to the <literal>configs.imageregistry.operator.openshift.io</literal> and ConfigMap
resources, configuration is provided to the Operator by a separate secret
resource located within the <literal>openshift-image-registry</literal> namespace.</simpara>
<simpara>The <literal>image-registry-private-configuration-user</literal> secret provides
credentials needed for storage access and management. It overrides the default
credentials used by the Operator, if default credentials were found.</simpara>
<simpara>For GCS on GCP storage, the secret is expected to contain one key whose value is the
contents of a credentials file provided by GCP:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>REGISTRY_STORAGE_GCS_KEYFILE</literal></simpara>
</listitem>
</itemizedlist>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>Create an OpenShift Container Platform secret that contains the required keys.</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc create secret generic image-registry-private-configuration-user --from-file=REGISTRY_STORAGE_GCS_KEYFILE=&lt;path_to_keyfile&gt; --namespace openshift-image-registry</programlisting>
</listitem>
</itemizedlist>
</section>
<section xml:id="registry-configuring-storage-gcp-user-infra_configuring-registry-storage-gcp-user-infrastructure">
<title>Configuring the registry storage for GCP with user-provisioned infrastructure</title>
<simpara>If the Registry Operator cannot create a Google Cloud Platform (GCP) bucket, you must set up the storage medium manually and configure the settings in the registry custom resource (CR).</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>A cluster on GCP with user-provisioned infrastructure.</simpara>
</listitem>
<listitem>
<simpara>To configure registry storage for GCP, you need to provide Registry Operator
cloud credentials.</simpara>
</listitem>
<listitem>
<simpara>For GCS on GCP storage, the secret is expected to contain one key whose value is the
contents of a credentials file provided by GCP:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>REGISTRY_STORAGE_GCS_KEYFILE</literal></simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Set up an <link xlink:href="https://cloud.google.com/storage/docs/lifecycle">Object Lifecycle Management policy</link> to abort incomplete multipart uploads that are one day old.</simpara>
</listitem>
<listitem>
<simpara>Fill in the storage configuration in <literal>configs.imageregistry.operator.openshift.io/cluster</literal>:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc edit configs.imageregistry.operator.openshift.io/cluster</programlisting>
<formalpara>
<title>Example configuration</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered"># ...
storage:
  gcs:
    bucket: &lt;bucket-name&gt;
    projectID: &lt;project-id&gt;
    region: &lt;region-name&gt;
# ...</programlisting>
</para>
</formalpara>
</listitem>
</orderedlist>
<warning>
<simpara>You can secure your registry images that use a Google Cloud Storage bucket by setting <link xlink:href="https://cloud.google.com/storage/docs/using-public-access-prevention">public access prevention</link>.</simpara>
</warning>
</section>
<section xml:id="registry-operator-configuration-resource-overview-gcp-gcs_configuring-registry-storage-gcp-user-infrastructure">
<title>Image Registry Operator configuration parameters for GCP GCS</title>
<simpara>The following configuration parameters are available for GCP GCS registry storage.</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="27.2727*"/>
<colspec colname="col_2" colwidth="72.7273*"/>
<thead>
<row>
<entry align="left" valign="top">Parameter</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>bucket</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Bucket is the bucket name in which you want to store the registry&#8217;s data.
It is optional and is generated if not provided.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>region</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Region is the GCS location in which your bucket exists. It is optional and is
set based on the installed GCS Region.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>projectID</literal></simpara></entry>
<entry align="left" valign="top"><simpara>ProjectID is the Project ID of the GCP project that this bucket should be
associated with. It is optional.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>keyID</literal></simpara></entry>
<entry align="left" valign="top"><simpara>KeyID is the KMS key ID to use for encryption. It is optional because
buckets are encrypted by default on GCP. This allows for the use of a custom
encryption key.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
</section>
<section xml:id="configuring-registry-storage-openstack-user-infrastructure">
<title>Configuring the registry for OpenStack user-provisioned infrastructure</title>

<simpara>You can configure the registry of a cluster that runs on your own Red Hat OpenStack Platform (RHOSP) infrastructure.</simpara>
<section xml:id="registry-configuring-registry-storage-swift-trust_configuring-registry-storage-openstack-user-infrastructure">
<title>Configuring the Image Registry Operator to trust Swift storage</title>
<simpara>You must configure the Image Registry Operator to trust Red Hat OpenStack Platform (RHOSP) Swift storage.</simpara>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>From a command line, enter the following command to change the value of the <literal>spec.disableRedirect</literal> field in the <literal>config.imageregistry</literal> object to <literal>true</literal>:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"disableRedirect":true}}'</programlisting>
</listitem>
</itemizedlist>
</section>
<section xml:id="registry-operator-config-resources-secret-openstack_configuring-registry-storage-openstack-user-infrastructure">
<title>Configuring a secret for the Image Registry Operator</title>
<simpara>In addition to the <literal>configs.imageregistry.operator.openshift.io</literal> and ConfigMap
resources, configuration is provided to the Operator by a separate secret
resource located within the <literal>openshift-image-registry</literal> namespace.</simpara>
<simpara>The <literal>image-registry-private-configuration-user</literal> secret provides
credentials needed for storage access and management. It overrides the default
credentials used by the Operator, if default credentials were found.</simpara>
<simpara>For Swift on Red Hat OpenStack Platform (RHOSP) storage, the secret is expected to contain the following two keys:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>REGISTRY_STORAGE_SWIFT_USERNAME</literal></simpara>
</listitem>
<listitem>
<simpara><literal>REGISTRY_STORAGE_SWIFT_PASSWORD</literal></simpara>
</listitem>
</itemizedlist>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>Create an OpenShift Container Platform secret that contains the required keys.</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc create secret generic image-registry-private-configuration-user --from-literal=REGISTRY_STORAGE_SWIFT_USERNAME=&lt;username&gt; --from-literal=REGISTRY_STORAGE_SWIFT_PASSWORD=&lt;password&gt; -n openshift-image-registry</programlisting>
</listitem>
</itemizedlist>
</section>
<section xml:id="registry-configuring-storage-openstack-user-infra_configuring-registry-storage-openstack-user-infrastructure">
<title>Registry storage for RHOSP with user-provisioned infrastructure</title>
<simpara>If the Registry Operator cannot create a Swift bucket, you must set up the storage medium manually and configure the settings in the registry custom resource (CR).</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>A cluster on Red Hat OpenStack Platform (RHOSP) with user-provisioned infrastructure.</simpara>
</listitem>
<listitem>
<simpara>To configure registry storage for RHOSP, you need to provide Registry Operator
cloud credentials.</simpara>
</listitem>
<listitem>
<simpara>For Swift on RHOSP storage, the secret is expected to contain the following two keys:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>REGISTRY_STORAGE_SWIFT_USERNAME</literal></simpara>
</listitem>
<listitem>
<simpara><literal>REGISTRY_STORAGE_SWIFT_PASSWORD</literal></simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>Fill in the storage configuration in <literal>configs.imageregistry.operator.openshift.io/cluster</literal>:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc edit configs.imageregistry.operator.openshift.io/cluster</programlisting>
<formalpara>
<title>Example configuration</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered"># ...
storage:
  swift:
    container: &lt;container-id&gt;
# ...</programlisting>
</para>
</formalpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="registry-operator-configuration-resource-overview-openstack-swift_configuring-registry-storage-openstack-user-infrastructure">
<title>Image Registry Operator configuration parameters for RHOSP Swift</title>
<simpara>The following configuration parameters are available for Red Hat OpenStack Platform (RHOSP) Swift
registry storage.</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="27.2727*"/>
<colspec colname="col_2" colwidth="72.7273*"/>
<thead>
<row>
<entry align="left" valign="top">Parameter</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>authURL</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Defines the URL for obtaining the authentication token. This value is optional.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>authVersion</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Specifies the Auth version of RHOSP, for example, <literal>authVersion: "3"</literal>. This value is optional.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>container</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Defines the name of a Swift container for storing registry data. This value is optional.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>domain</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Specifies the RHOSP domain name for the Identity v3 API. This value is optional.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>domainID</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Specifies the RHOSP domain ID for the Identity v3 API. This value is optional.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>tenant</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Defines the RHOSP tenant name to be used by the registry. This value is optional.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>tenantID</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Defines the RHOSP tenant ID to be used by the registry. This value is optional.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>regionName</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Defines the RHOSP region in which the container exists. This value is optional.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
</section>
<section xml:id="configuring-registry-storage-azure-user-infrastructure">
<title>Configuring the registry for Azure user-provisioned infrastructure</title>

<section xml:id="registry-operator-config-resources-secret-azure_configuring-registry-storage-azure-user-infrastructure">
<title>Configuring a secret for the Image Registry Operator</title>
<simpara>In addition to the <literal>configs.imageregistry.operator.openshift.io</literal> and ConfigMap
resources, configuration is provided to the Operator by a separate secret
resource located within the <literal>openshift-image-registry</literal> namespace.</simpara>
<simpara>The <literal>image-registry-private-configuration-user</literal> secret provides
credentials needed for storage access and management. It overrides the default
credentials used by the Operator, if default credentials were found.</simpara>
<simpara>For Azure registry storage, the secret is expected to contain one key whose value is the
contents of a credentials file provided by Azure:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>REGISTRY_STORAGE_AZURE_ACCOUNTKEY</literal></simpara>
</listitem>
</itemizedlist>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>Create an OpenShift Container Platform secret that contains the required key.</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc create secret generic image-registry-private-configuration-user --from-literal=REGISTRY_STORAGE_AZURE_ACCOUNTKEY=&lt;accountkey&gt; --namespace openshift-image-registry</programlisting>
</listitem>
</itemizedlist>
</section>
<section xml:id="registry-configuring-storage-azure-user-infra_configuring-registry-storage-azure-user-infrastructure">
<title>Configuring registry storage for Azure</title>
<simpara>During installation, your cloud credentials are sufficient to create Azure Blob
Storage, and the Registry Operator automatically configures storage.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>A cluster on Azure with user-provisioned infrastructure.</simpara>
</listitem>
<listitem>
<simpara>To configure registry storage for Azure, provide Registry Operator
cloud credentials.</simpara>
</listitem>
<listitem>
<simpara>For Azure storage the secret is expected to contain one key:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>REGISTRY_STORAGE_AZURE_ACCOUNTKEY</literal></simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Create an <link xlink:href="https://docs.microsoft.com/en-us/azure/storage/blobs/storage-quickstart-blobs-portal">Azure storage container</link>.</simpara>
</listitem>
<listitem>
<simpara>Fill in the storage configuration in <literal>configs.imageregistry.operator.openshift.io/cluster</literal>:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc edit configs.imageregistry.operator.openshift.io/cluster</programlisting>
<formalpara>
<title>Example configuration</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">storage:
  azure:
    accountName: &lt;storage-account-name&gt;
    container: &lt;container-name&gt;</programlisting>
</para>
</formalpara>
</listitem>
</orderedlist>
</section>
<section xml:id="registry-configuring-storage-azure-gov-cloud_configuring-registry-storage-azure-user-infrastructure">
<title>Configuring registry storage for Azure Government</title>
<simpara>During installation, your cloud credentials are sufficient to create Azure Blob
Storage, and the Registry Operator automatically configures storage.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>A cluster on Azure with user-provisioned infrastructure in a government region.</simpara>
</listitem>
<listitem>
<simpara>To configure registry storage for Azure, provide Registry Operator
cloud credentials.</simpara>
</listitem>
<listitem>
<simpara>For Azure storage, the secret is expected to contain one key:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>REGISTRY_STORAGE_AZURE_ACCOUNTKEY</literal></simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Create an <link xlink:href="https://docs.microsoft.com/en-us/azure/storage/blobs/storage-quickstart-blobs-portal">Azure storage container</link>.</simpara>
</listitem>
<listitem>
<simpara>Fill in the storage configuration in <literal>configs.imageregistry.operator.openshift.io/cluster</literal>:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc edit configs.imageregistry.operator.openshift.io/cluster</programlisting>
<formalpara>
<title>Example configuration</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">storage:
  azure:
    accountName: &lt;storage-account-name&gt;
    container: &lt;container-name&gt;
    cloudName: AzureUSGovernmentCloud <co xml:id="CO2-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO2-1">
<para><literal>cloudName</literal> is the name of the Azure cloud environment, which can be used to configure the Azure SDK with the appropriate Azure API endpoints. Defaults to <literal>AzurePublicCloud</literal>. You can also set <literal>cloudName</literal> to <literal>AzureUSGovernmentCloud</literal>, <literal>AzureChinaCloud</literal>, or <literal>AzureGermanCloud</literal> with sufficient credentials.</para>
</callout>
</calloutlist>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="configuring-registry-storage-openstack">
<title>Configuring the registry for RHOSP</title>

<section xml:id="installation-registry-osp-creating-custom-pvc_configuring-registry-storage-openstack">
<title>Configuring an image registry with custom storage on clusters that run on RHOSP</title>
<simpara>After you install a cluster on Red Hat OpenStack Platform (RHOSP), you can use a Cinder volume that is in a specific availability zone for registry storage.</simpara>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Create a YAML file that specifies the storage class and availability zone to use. For example:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: custom-csi-storageclass
provisioner: cinder.csi.openstack.org
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: true
parameters:
  availability: &lt;availability_zone_name&gt;</programlisting>
<note>
<simpara>OpenShift Container Platform does not verify the existence of the availability zone you choose. Verify the name of the availability zone before you apply the configuration.</simpara>
</note>
</listitem>
<listitem>
<simpara>From a command line, apply the configuration:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc apply -f &lt;storage_class_file_name&gt;</programlisting>
<formalpara>
<title>Example output</title>
<para>
<programlisting language="terminal" linenumbering="unnumbered">storageclass.storage.k8s.io/custom-csi-storageclass created</programlisting>
</para>
</formalpara>
</listitem>
<listitem>
<simpara>Create a YAML file that specifies a persistent volume claim (PVC) that uses your storage class and the <literal>openshift-image-registry</literal> namespace. For example:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: csi-pvc-imageregistry
  namespace: openshift-image-registry <co xml:id="CO3-1"/>
  annotations:
    imageregistry.openshift.io: "true"
spec:
  accessModes:
  - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 100Gi <co xml:id="CO3-2"/>
  storageClassName: &lt;your_custom_storage_class&gt; <co xml:id="CO3-3"/></programlisting>
<calloutlist>
<callout arearefs="CO3-1">
<para>Enter the namespace <literal>openshift-image-registry</literal>. This namespace allows the Cluster Image Registry Operator to consume the PVC.</para>
</callout>
<callout arearefs="CO3-2">
<para>Optional: Adjust the volume size.</para>
</callout>
<callout arearefs="CO3-3">
<para>Enter the name of the storage class that you created.</para>
</callout>
</calloutlist>
</listitem>
<listitem>
<simpara>From a command line, apply the configuration:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc apply -f &lt;pvc_file_name&gt;</programlisting>
<formalpara>
<title>Example output</title>
<para>
<programlisting language="terminal" linenumbering="unnumbered">persistentvolumeclaim/csi-pvc-imageregistry created</programlisting>
</para>
</formalpara>
</listitem>
<listitem>
<simpara>Replace the original persistent volume claim in the image registry configuration with the new claim:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc patch configs.imageregistry.operator.openshift.io/cluster --type 'json' -p='[{"op": "replace", "path": "/spec/storage/pvc/claim", "value": "csi-pvc-imageregistry"}]'</programlisting>
<formalpara>
<title>Example output</title>
<para>
<programlisting language="terminal" linenumbering="unnumbered">config.imageregistry.operator.openshift.io/cluster patched</programlisting>
</para>
</formalpara>
<simpara>Over the next several minutes, the configuration is updated.</simpara>
</listitem>
</orderedlist>
<formalpara>
<title>Verification</title>
<para>To confirm that the registry is using the resources that you defined:</para>
</formalpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Verify that the PVC claim value is identical to the name that you provided in your PVC definition:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc get configs.imageregistry.operator.openshift.io/cluster -o yaml</programlisting>
<formalpara>
<title>Example output</title>
<para>
<programlisting language="terminal" linenumbering="unnumbered">...
status:
    ...
    managementState: Managed
    pvc:
      claim: csi-pvc-imageregistry
...</programlisting>
</para>
</formalpara>
</listitem>
<listitem>
<simpara>Verify that the status of the PVC is <literal>Bound</literal>:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc get pvc -n openshift-image-registry csi-pvc-imageregistry</programlisting>
<formalpara>
<title>Example output</title>
<para>
<programlisting language="terminal" linenumbering="unnumbered">NAME                   STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS             AGE
csi-pvc-imageregistry  Bound    pvc-72a8f9c9-f462-11e8-b6b6-fa163e18b7b5   100Gi      RWO            custom-csi-storageclass  11m</programlisting>
</para>
</formalpara>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="configuring-registry-storage-baremetal">
<title>Configuring the registry for bare metal</title>

<section xml:id="registry-removed_configuring-registry-storage-baremetal">
<title>Image registry removed during installation</title>
<simpara>On platforms that do not provide shareable object storage, the OpenShift Image Registry Operator bootstraps itself as <literal>Removed</literal>. This allows <literal>openshift-installer</literal> to complete installations on these platform types.</simpara>
<simpara>After installation, you must edit the Image Registry Operator configuration to switch the <literal>managementState</literal> from <literal>Removed</literal> to <literal>Managed</literal>.</simpara>
</section>
<section xml:id="registry-change-management-state_configuring-registry-storage-baremetal">
<title>Changing the image registry&#8217;s management state</title>
<simpara>To start the image registry, you must change the Image Registry Operator configuration&#8217;s <literal>managementState</literal> from <literal>Removed</literal> to <literal>Managed</literal>.</simpara>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>Change <literal>managementState</literal> Image Registry Operator configuration from <literal>Removed</literal> to <literal>Managed</literal>. For example:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"managementState":"Managed"}}'</programlisting>
</listitem>
</itemizedlist>
</section>
<section xml:id="installation-registry-storage-config_configuring-registry-storage-baremetal">
<title>Image registry storage configuration</title>
<simpara>The Image Registry Operator is not initially available for platforms that do
not provide default storage. After installation, you must configure your
registry to use storage so that the Registry Operator is made available.</simpara>
<simpara>Instructions are shown for configuring a persistent volume, which is required for production clusters. Where applicable, instructions are shown for configuring an empty directory as the storage location, which is available for only non-production clusters.</simpara>
<simpara>Additional instructions are provided for allowing the image registry to use block storage types by using the <literal>Recreate</literal> rollout strategy during upgrades.</simpara>
<section xml:id="registry-configuring-storage-baremetal_configuring-registry-storage-baremetal">
<title>Configuring registry storage for bare metal and other manual installations</title>
<simpara>As a cluster administrator, following installation you must configure your
registry to use storage.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have access to the cluster as a user with the <literal>cluster-admin</literal> role.</simpara>
</listitem>
<listitem>
<simpara>You have a cluster
that uses manually-provisioned Red Hat Enterprise Linux CoreOS (RHCOS) nodes, such as bare metal.</simpara>
</listitem>
<listitem>
<simpara>You have provisioned persistent storage for your cluster, such as Red Hat OpenShift Data Foundation.</simpara>
<important>
<simpara>OpenShift Container Platform supports <literal>ReadWriteOnce</literal> access for image registry storage when you have only one replica. <literal>ReadWriteOnce</literal> access also requires that the registry uses the <literal>Recreate</literal> rollout strategy. To deploy an image registry that supports high availability with two or more replicas, <literal>ReadWriteMany</literal> access is required.</simpara>
</important>
</listitem>
<listitem>
<simpara>Must have 100Gi capacity.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>To configure your registry to use storage, change the <literal>spec.storage.pvc</literal> in
the <literal>configs.imageregistry/cluster</literal> resource.</simpara>
<note>
<simpara>When you use shared storage, review your security settings to prevent outside access.</simpara>
</note>
</listitem>
<listitem>
<simpara>Verify that you do not have a registry pod:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc get pod -n openshift-image-registry -l docker-registry=default</programlisting>
<formalpara>
<title>Example output</title>
<para>
<programlisting language="terminal" linenumbering="unnumbered">No resources found in openshift-image-registry namespace</programlisting>
</para>
</formalpara>
<note>
<simpara>If you do have a registry pod in your output, you do not need to continue with this procedure.</simpara>
</note>
</listitem>
<listitem>
<simpara>Check the registry configuration:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc edit configs.imageregistry.operator.openshift.io</programlisting>
<formalpara>
<title>Example output</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">storage:
  pvc:
    claim:</programlisting>
</para>
</formalpara>
<simpara>Leave the <literal>claim</literal> field blank to allow the automatic creation of an
<literal>image-registry-storage</literal> PVC.</simpara>
</listitem>
<listitem>
<simpara>Check the <literal>clusteroperator</literal> status:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc get clusteroperator image-registry</programlisting>
<formalpara>
<title>Example output</title>
<para>
<programlisting language="terminal" linenumbering="unnumbered">NAME             VERSION              AVAILABLE   PROGRESSING   DEGRADED   SINCE   MESSAGE
image-registry   4.14                 True        False         False      6h50m</programlisting>
</para>
</formalpara>
</listitem>
<listitem>
<simpara>Ensure that your registry is set to managed to enable building and pushing of images.</simpara>
<itemizedlist>
<listitem>
<simpara>Run:</simpara>
<screen>$ oc edit configs.imageregistry/cluster</screen>
<simpara>Then, change the line</simpara>
<screen>managementState: Removed</screen>
<simpara>to</simpara>
<screen>managementState: Managed</screen>
</listitem>
</itemizedlist>
</listitem>
</orderedlist>
</section>
<section xml:id="installation-registry-storage-non-production_configuring-registry-storage-baremetal">
<title>Configuring storage for the image registry in non-production clusters</title>
<simpara>You must configure storage for the Image Registry Operator. For non-production
clusters, you can set the image registry to an empty directory. If you do so,
all images are lost if you restart the registry.</simpara>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>To set the image registry storage to an empty directory:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"storage":{"emptyDir":{}}}}'</programlisting>
<warning>
<simpara>Configure this option for only non-production clusters.</simpara>
</warning>
<simpara>If you run this command before the Image Registry Operator initializes its
components, the <literal>oc patch</literal> command fails with the following error:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">Error from server (NotFound): configs.imageregistry.operator.openshift.io "cluster" not found</programlisting>
<simpara>Wait a few minutes and run the command again.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="installation-registry-storage-block-recreate-rollout-bare-metal_configuring-registry-storage-baremetal">
<title>Configuring block registry storage for bare metal</title>
<simpara>To allow the image registry to use block storage types during upgrades as a cluster administrator, you can use the <literal>Recreate</literal> rollout strategy.</simpara>
<important>
<simpara>Block storage volumes, or block persistent volumes, are supported but not recommended for use with the image registry on production clusters. An installation where the registry is configured on block storage is not highly available because the registry cannot have more than one replica.</simpara>
<simpara>If you choose to use a block storage volume with the image registry, you must use a filesystem persistent volume claim (PVC).</simpara>
</important>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Enter the following command to set the image registry storage as a block storage type, patch the registry so that it uses the <literal>Recreate</literal> rollout strategy, and runs with only one (<literal>1</literal>) replica:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc patch config.imageregistry.operator.openshift.io/cluster --type=merge -p '{"spec":{"rolloutStrategy":"Recreate","replicas":1}}'</programlisting>
</listitem>
<listitem>
<simpara>Provision the PV for the block storage device, and create a PVC for that volume. The requested block volume uses the ReadWriteOnce (RWO) access mode.</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Create a <literal>pvc.yaml</literal> file with the following contents to define a VMware vSphere <literal>PersistentVolumeClaim</literal> object:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: image-registry-storage <co xml:id="CO4-1"/>
  namespace: openshift-image-registry <co xml:id="CO4-2"/>
spec:
  accessModes:
  - ReadWriteOnce <co xml:id="CO4-3"/>
  resources:
    requests:
      storage: 100Gi <co xml:id="CO4-4"/></programlisting>
<calloutlist>
<callout arearefs="CO4-1">
<para>A unique name that represents the <literal>PersistentVolumeClaim</literal> object.</para>
</callout>
<callout arearefs="CO4-2">
<para>The namespace for the <literal>PersistentVolumeClaim</literal> object, which is <literal>openshift-image-registry</literal>.</para>
</callout>
<callout arearefs="CO4-3">
<para>The access mode of the persistent volume claim. With <literal>ReadWriteOnce</literal>, the volume can be mounted with read and write permissions by a single node.</para>
</callout>
<callout arearefs="CO4-4">
<para>The size of the persistent volume claim.</para>
</callout>
</calloutlist>
</listitem>
<listitem>
<simpara>Enter the following command to create the <literal>PersistentVolumeClaim</literal> object from the file:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc create -f pvc.yaml -n openshift-image-registry</programlisting>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>Enter the following command to edit the registry configuration so that it references the correct PVC:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc edit config.imageregistry.operator.openshift.io -o yaml</programlisting>
<formalpara>
<title>Example output</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">storage:
  pvc:
    claim: <co xml:id="CO5-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO5-1">
<para>By creating a custom PVC, you can leave the <literal>claim</literal> field blank for the default automatic creation of an <literal>image-registry-storage</literal> PVC.</para>
</callout>
</calloutlist>
</listitem>
</orderedlist>
</section>
<section xml:id="registry-configuring-registry-storage-rhodf-cephrgw_configuring-registry-storage-baremetal">
<title>Configuring the Image Registry Operator to use Ceph RGW storage with Red Hat OpenShift Data Foundation</title>
<simpara>Red Hat OpenShift Data Foundation integrates multiple storage types that you can use with the OpenShift image registry:</simpara>
<itemizedlist>
<listitem>
<simpara>Ceph, a shared and distributed file system and on-premises object storage</simpara>
</listitem>
<listitem>
<simpara>NooBaa, providing a Multicloud Object Gateway</simpara>
</listitem>
</itemizedlist>
<simpara>This document outlines the procedure to configure the image registry to use Ceph RGW storage.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have access to the cluster as a user with the <literal>cluster-admin</literal> role.</simpara>
</listitem>
<listitem>
<simpara>You have access to the OpenShift Container Platform web console.</simpara>
</listitem>
<listitem>
<simpara>You installed the <literal>oc</literal> CLI.</simpara>
</listitem>
<listitem>
<simpara>You installed the <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_openshift_data_foundation/4.10">OpenShift Data Foundation Operator</link> to provide object storage and Ceph RGW object storage.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Create the object bucket claim using the <literal>ocs-storagecluster-ceph-rgw</literal> storage class. For example:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">cat &lt;&lt;EOF | oc apply -f -
apiVersion: objectbucket.io/v1alpha1
kind: ObjectBucketClaim
metadata:
  name: rgwbucket
  namespace: openshift-storage <co xml:id="CO6-1"/>
spec:
  storageClassName: ocs-storagecluster-ceph-rgw
  generateBucketName: rgwbucket
EOF</programlisting>
<calloutlist>
<callout arearefs="CO6-1">
<para>Alternatively, you can use the <literal>openshift-image-registry</literal> namespace.</para>
</callout>
</calloutlist>
</listitem>
<listitem>
<simpara>Get the bucket name by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ bucket_name=$(oc get obc -n openshift-storage rgwbucket -o jsonpath='{.spec.bucketName}')</programlisting>
</listitem>
<listitem>
<simpara>Get the AWS credentials by entering the following commands:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ AWS_ACCESS_KEY_ID=$(oc get secret -n openshift-storage rgwbucket -o jsonpath='{.data.AWS_ACCESS_KEY_ID}' | base64 --decode)</programlisting>
<programlisting language="terminal" linenumbering="unnumbered">$ AWS_SECRET_ACCESS_KEY=$(oc get secret -n openshift-storage rgwbucket -o jsonpath='{.data.AWS_SECRET_ACCESS_KEY}' | base64 --decode)</programlisting>
</listitem>
<listitem>
<simpara>Create the secret <literal>image-registry-private-configuration-user</literal> with the AWS credentials for the new bucket under <literal>openshift-image-registry project</literal> by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc create secret generic image-registry-private-configuration-user --from-literal=REGISTRY_STORAGE_S3_ACCESSKEY=${AWS_ACCESS_KEY_ID} --from-literal=REGISTRY_STORAGE_S3_SECRETKEY=${AWS_SECRET_ACCESS_KEY} --namespace openshift-image-registry</programlisting>
</listitem>
<listitem>
<simpara>Get the <literal>buckethost</literal> value by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ route_host=$(oc get objectbucket $bucket_name -n openshift-storage -o=jsonpath='{.spec.endpoint.bucketHost}')</programlisting>
</listitem>
<listitem>
<simpara>Create a config map that uses an ingress certificate by entering the following commands:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc extract secret/router-certs-default  -n openshift-ingress  --confirm</programlisting>
<programlisting language="terminal" linenumbering="unnumbered">$ oc create configmap image-registry-s3-bundle --from-file=ca-bundle.crt=./tls.crt  -n openshift-config</programlisting>
</listitem>
<listitem>
<simpara>Configure the image registry to use the Ceph RGW object storage by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc patch config.image/cluster -p '{"spec":{"managementState":"Managed","replicas":2,"storage":{"managementState":"Unmanaged","s3":{"bucket":'\"${bucket_name}\"',"region":"us-east-1","regionEndpoint":'\"https://${route_host}\"',"virtualHostedStyle":false,"encrypt":false,"trustedCA":{"name":"image-registry-s3-bundle"}}}}}' --type=merge</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="registry-configuring-registry-storage-rhodf-nooba_configuring-registry-storage-baremetal">
<title>Configuring the Image Registry Operator to use Noobaa storage with Red Hat OpenShift Data Foundation</title>
<simpara>Red Hat OpenShift Data Foundation integrates multiple storage types that you can use with the OpenShift image registry:</simpara>
<itemizedlist>
<listitem>
<simpara>Ceph, a shared and distributed file system and on-premises object storage</simpara>
</listitem>
<listitem>
<simpara>NooBaa, providing a Multicloud Object Gateway</simpara>
</listitem>
</itemizedlist>
<simpara>This document outlines the procedure to configure the image registry to use Noobaa storage.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have access to the cluster as a user with the <literal>cluster-admin</literal> role.</simpara>
</listitem>
<listitem>
<simpara>You have access to the OpenShift Container Platform web console.</simpara>
</listitem>
<listitem>
<simpara>You installed the <literal>oc</literal> CLI.</simpara>
</listitem>
<listitem>
<simpara>You installed the <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_openshift_data_foundation/4.10">OpenShift Data Foundation Operator</link> to provide object storage and Noobaa object storage.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Create the object bucket claim using the <literal>openshift-storage.noobaa.io</literal> storage class. For example:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">cat &lt;&lt;EOF | oc apply -f -
apiVersion: objectbucket.io/v1alpha1
kind: ObjectBucketClaim
metadata:
  name: noobaatest
  namespace: openshift-storage <co xml:id="CO7-1"/>
spec:
  storageClassName: openshift-storage.noobaa.io
  generateBucketName: noobaatest
EOF</programlisting>
<calloutlist>
<callout arearefs="CO7-1">
<para>Alternatively, you can use the <literal>openshift-image-registry</literal> namespace.</para>
</callout>
</calloutlist>
</listitem>
<listitem>
<simpara>Get the bucket name by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ bucket_name=$(oc get obc -n openshift-storage noobaatest -o jsonpath='{.spec.bucketName}')</programlisting>
</listitem>
<listitem>
<simpara>Get the AWS credentials by entering the following commands:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ AWS_ACCESS_KEY_ID=$(oc get secret -n openshift-storage noobaatest -o yaml | grep -w "AWS_ACCESS_KEY_ID:" | head -n1 | awk '{print $2}' | base64 --decode)</programlisting>
<programlisting language="terminal" linenumbering="unnumbered">$ AWS_SECRET_ACCESS_KEY=$(oc get secret -n openshift-storage noobaatest -o yaml | grep -w "AWS_SECRET_ACCESS_KEY:" | head -n1 | awk '{print $2}' | base64 --decode)</programlisting>
</listitem>
<listitem>
<simpara>Create the secret <literal>image-registry-private-configuration-user</literal> with the AWS credentials for the new bucket under <literal>openshift-image-registry project</literal> by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc create secret generic image-registry-private-configuration-user --from-literal=REGISTRY_STORAGE_S3_ACCESSKEY=${AWS_ACCESS_KEY_ID} --from-literal=REGISTRY_STORAGE_S3_SECRETKEY=${AWS_SECRET_ACCESS_KEY} --namespace openshift-image-registry</programlisting>
</listitem>
<listitem>
<simpara>Get the route host by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ route_host=$(oc get route s3 -n openshift-storage -o=jsonpath='{.spec.host}')</programlisting>
</listitem>
<listitem>
<simpara>Create a config map that uses an ingress certificate by entering the following commands:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc extract secret/router-certs-default  -n openshift-ingress  --confirm</programlisting>
<programlisting language="terminal" linenumbering="unnumbered">$ oc create configmap image-registry-s3-bundle --from-file=ca-bundle.crt=./tls.crt  -n openshift-config</programlisting>
</listitem>
<listitem>
<simpara>Configure the image registry to use the Nooba object storage by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc patch config.image/cluster -p '{"spec":{"managementState":"Managed","replicas":2,"storage":{"managementState":"Unmanaged","s3":{"bucket":'\"${bucket_name}\"',"region":"us-east-1","regionEndpoint":'\"https://${route_host}\"',"virtualHostedStyle":false,"encrypt":false,"trustedCA":{"name":"image-registry-s3-bundle"}}}}}' --type=merge</programlisting>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="registry-configuring-registry-storage-rhodf-cephfs_configuring-registry-storage-baremetal">
<title>Configuring the Image Registry Operator to use CephFS storage with Red Hat OpenShift Data Foundation</title>
<simpara>Red Hat OpenShift Data Foundation integrates multiple storage types that you can use with the OpenShift image registry:</simpara>
<itemizedlist>
<listitem>
<simpara>Ceph, a shared and distributed file system and on-premises object storage</simpara>
</listitem>
<listitem>
<simpara>NooBaa, providing a Multicloud Object Gateway</simpara>
</listitem>
</itemizedlist>
<simpara>This document outlines the procedure to configure the image registry to use CephFS storage.</simpara>
<note>
<simpara>CephFS uses persistent volume claim (PVC) storage. It is not recommended to use PVCs for image registry storage if there are other options are available, such as Ceph RGW or Noobaa.</simpara>
</note>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have access to the cluster as a user with the <literal>cluster-admin</literal> role.</simpara>
</listitem>
<listitem>
<simpara>You have access to the OpenShift Container Platform web console.</simpara>
</listitem>
<listitem>
<simpara>You installed the <literal>oc</literal> CLI.</simpara>
</listitem>
<listitem>
<simpara>You installed the <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_openshift_data_foundation/4.10">OpenShift Data Foundation Operator</link> to provide object storage and CephFS file storage.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Create a PVC to use the <literal>cephfs</literal> storage class. For example:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">cat &lt;&lt;EOF | oc apply -f -
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
 name: registry-storage-pvc
 namespace: openshift-image-registry
spec:
 accessModes:
 - ReadWriteMany
 resources:
   requests:
     storage: 100Gi
 storageClassName: ocs-storagecluster-cephfs
EOF</programlisting>
</listitem>
<listitem>
<simpara>Configure the image registry to use the CephFS file system storage by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc patch config.image/cluster -p '{"spec":{"managementState":"Managed","replicas":2,"storage":{"managementState":"Unmanaged","pvc":{"claim":"registry-storage-pvc"}}}}' --type=merge</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="configuring-registry-storage-baremetal-addtl-resources" role="_additional-resources">
<title>Additional resources</title>
<itemizedlist>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/openshift_container_platform/4.14/html-single/scalability_and_performance/#optimizing-storage">Recommended configurable storage technology</link></simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_openshift_data_foundation/4.10/html-single/managing_and_allocating_storage_resources/index#configuring-image-registry-to-use-openshift-data-foundation_rhodf">Configuring Image Registry to use OpenShift Data Foundation</link></simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="configuring-registry-storage-vsphere">
<title>Configuring the registry for vSphere</title>

<section xml:id="registry-removed_configuring-registry-storage-vsphere">
<title>Image registry removed during installation</title>
<simpara>On platforms that do not provide shareable object storage, the OpenShift Image Registry Operator bootstraps itself as <literal>Removed</literal>. This allows <literal>openshift-installer</literal> to complete installations on these platform types.</simpara>
<simpara>After installation, you must edit the Image Registry Operator configuration to switch the <literal>managementState</literal> from <literal>Removed</literal> to <literal>Managed</literal>.</simpara>
</section>
<section xml:id="registry-change-management-state_configuring-registry-storage-vsphere">
<title>Changing the image registry&#8217;s management state</title>
<simpara>To start the image registry, you must change the Image Registry Operator configuration&#8217;s <literal>managementState</literal> from <literal>Removed</literal> to <literal>Managed</literal>.</simpara>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>Change <literal>managementState</literal> Image Registry Operator configuration from <literal>Removed</literal> to <literal>Managed</literal>. For example:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"managementState":"Managed"}}'</programlisting>
</listitem>
</itemizedlist>
</section>
<section xml:id="installation-registry-storage-config_configuring-registry-storage-vsphere">
<title>Image registry storage configuration</title>
<simpara>The Image Registry Operator is not initially available for platforms that do
not provide default storage. After installation, you must configure your
registry to use storage so that the Registry Operator is made available.</simpara>
<simpara>Instructions are shown for configuring a persistent volume, which is required for production clusters. Where applicable, instructions are shown for configuring an empty directory as the storage location, which is available for only non-production clusters.</simpara>
<simpara>Additional instructions are provided for allowing the image registry to use block storage types by using the <literal>Recreate</literal> rollout strategy during upgrades.</simpara>
<section xml:id="registry-configuring-storage-vsphere_configuring-registry-storage-vsphere">
<title>Configuring registry storage for VMware vSphere</title>
<simpara>As a cluster administrator, following installation you must configure your registry to use storage.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Cluster administrator permissions.</simpara>
</listitem>
<listitem>
<simpara>A cluster on VMware vSphere.</simpara>
</listitem>
<listitem>
<simpara>Persistent storage provisioned for your cluster, such as Red Hat OpenShift Data Foundation.</simpara>
<important>
<simpara>OpenShift Container Platform supports <literal>ReadWriteOnce</literal> access for image registry storage when you have only one replica. <literal>ReadWriteOnce</literal> access also requires that the registry uses the <literal>Recreate</literal> rollout strategy. To deploy an image registry that supports high availability with two or more replicas, <literal>ReadWriteMany</literal> access is required.</simpara>
</important>
</listitem>
<listitem>
<simpara>Must have "100Gi" capacity.</simpara>
</listitem>
</itemizedlist>
<important>
<simpara>Testing shows issues with using the NFS server on RHEL as storage backend for
core services. This includes the OpenShift Container Registry and Quay,
Prometheus for monitoring storage, and Elasticsearch for logging storage.
Therefore, using RHEL NFS to back PVs used by core services is not recommended.</simpara>
<simpara>Other NFS implementations on the marketplace might not have these issues.
Contact the individual NFS implementation vendor for more information on any
testing that was possibly completed against these OpenShift Container Platform core
components.</simpara>
</important>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>To configure your registry to use storage, change the <literal>spec.storage.pvc</literal> in the <literal>configs.imageregistry/cluster</literal> resource.</simpara>
<note>
<simpara>When you use shared storage, review your security settings to prevent outside access.</simpara>
</note>
</listitem>
<listitem>
<simpara>Verify that you do not have a registry pod:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc get pod -n openshift-image-registry -l docker-registry=default</programlisting>
<formalpara>
<title>Example output</title>
<para>
<programlisting language="terminal" linenumbering="unnumbered">No resourses found in openshift-image-registry namespace</programlisting>
</para>
</formalpara>
<note>
<simpara>If you do have a registry pod in your output, you do not need to continue with this procedure.</simpara>
</note>
</listitem>
<listitem>
<simpara>Check the registry configuration:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc edit configs.imageregistry.operator.openshift.io</programlisting>
<formalpara>
<title>Example output</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">storage:
  pvc:
    claim: <co xml:id="CO8-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO8-1">
<para>Leave the <literal>claim</literal> field blank to allow the automatic creation of an <literal>image-registry-storage</literal> persistent volume claim (PVC). The PVC is generated based on the default storage class. However, be aware that the default storage class might provide ReadWriteOnce (RWO) volumes, such as a RADOS Block Device (RBD), which can cause issues when you replicate to more than one replica.</para>
</callout>
</calloutlist>
</listitem>
<listitem>
<simpara>Check the <literal>clusteroperator</literal> status:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc get clusteroperator image-registry</programlisting>
<formalpara>
<title>Example output</title>
<para>
<programlisting language="terminal" linenumbering="unnumbered">NAME             VERSION                              AVAILABLE   PROGRESSING   DEGRADED   SINCE   MESSAGE
image-registry   4.7                                  True        False         False      6h50m</programlisting>
</para>
</formalpara>
</listitem>
</orderedlist>
</section>
<section xml:id="installation-registry-storage-non-production_configuring-registry-storage-vsphere">
<title>Configuring storage for the image registry in non-production clusters</title>
<simpara>You must configure storage for the Image Registry Operator. For non-production
clusters, you can set the image registry to an empty directory. If you do so,
all images are lost if you restart the registry.</simpara>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>To set the image registry storage to an empty directory:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"storage":{"emptyDir":{}}}}'</programlisting>
<warning>
<simpara>Configure this option for only non-production clusters.</simpara>
</warning>
<simpara>If you run this command before the Image Registry Operator initializes its
components, the <literal>oc patch</literal> command fails with the following error:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">Error from server (NotFound): configs.imageregistry.operator.openshift.io "cluster" not found</programlisting>
<simpara>Wait a few minutes and run the command again.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="installation-registry-storage-block-recreate-rollout_configuring-registry-storage-vsphere">
<title>Configuring block registry storage for VMware vSphere</title>
<simpara>To allow the image registry to use block storage types such as vSphere Virtual Machine Disk (VMDK) during upgrades as a cluster administrator, you can use the <literal>Recreate</literal> rollout strategy.</simpara>
<important>
<simpara>Block storage volumes are supported but not recommended for use with image
registry on production clusters. An installation where the registry is
configured on block storage is not highly available because the registry cannot
have more than one replica.</simpara>
</important>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Enter the following command to set the image registry storage as a block storage type, patch the registry so that it uses the <literal>Recreate</literal> rollout strategy, and runs with only <literal>1</literal> replica:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc patch config.imageregistry.operator.openshift.io/cluster --type=merge -p '{"spec":{"rolloutStrategy":"Recreate","replicas":1}}'</programlisting>
</listitem>
<listitem>
<simpara>Provision the PV for the block storage device, and create a PVC for that volume. The requested block volume uses the ReadWriteOnce (RWO) access mode.</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Create a <literal>pvc.yaml</literal> file with the following contents to define a VMware vSphere <literal>PersistentVolumeClaim</literal> object:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: image-registry-storage <co xml:id="CO9-1"/>
  namespace: openshift-image-registry <co xml:id="CO9-2"/>
spec:
  accessModes:
  - ReadWriteOnce <co xml:id="CO9-3"/>
  resources:
    requests:
      storage: 100Gi <co xml:id="CO9-4"/></programlisting>
<calloutlist>
<callout arearefs="CO9-1">
<para>A unique name that represents the <literal>PersistentVolumeClaim</literal> object.</para>
</callout>
<callout arearefs="CO9-2">
<para>The namespace for the <literal>PersistentVolumeClaim</literal> object, which is <literal>openshift-image-registry</literal>.</para>
</callout>
<callout arearefs="CO9-3">
<para>The access mode of the persistent volume claim. With <literal>ReadWriteOnce</literal>, the volume can be mounted with read and write permissions by a single node.</para>
</callout>
<callout arearefs="CO9-4">
<para>The size of the persistent volume claim.</para>
</callout>
</calloutlist>
</listitem>
<listitem>
<simpara>Enter the following command to create the <literal>PersistentVolumeClaim</literal> object from the file:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc create -f pvc.yaml -n openshift-image-registry</programlisting>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>Enter the following command to edit the registry configuration so that it references the correct PVC:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc edit config.imageregistry.operator.openshift.io -o yaml</programlisting>
<formalpara>
<title>Example output</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">storage:
  pvc:
    claim: <co xml:id="CO10-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO10-1">
<para>By creating a custom PVC, you can leave the <literal>claim</literal> field blank for the default automatic creation of an <literal>image-registry-storage</literal> PVC.</para>
</callout>
</calloutlist>
</listitem>
</orderedlist>
<simpara>For instructions about configuring registry storage so that it references the correct PVC, see <link linkend="registry-configuring-storage-vsphere_configuring-registry-storage-vsphere">Configuring the registry for vSphere</link>.</simpara>
</section>
<section xml:id="registry-configuring-registry-storage-rhodf-cephrgw_configuring-registry-storage-vsphere">
<title>Configuring the Image Registry Operator to use Ceph RGW storage with Red Hat OpenShift Data Foundation</title>
<simpara>Red Hat OpenShift Data Foundation integrates multiple storage types that you can use with the OpenShift image registry:</simpara>
<itemizedlist>
<listitem>
<simpara>Ceph, a shared and distributed file system and on-premises object storage</simpara>
</listitem>
<listitem>
<simpara>NooBaa, providing a Multicloud Object Gateway</simpara>
</listitem>
</itemizedlist>
<simpara>This document outlines the procedure to configure the image registry to use Ceph RGW storage.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have access to the cluster as a user with the <literal>cluster-admin</literal> role.</simpara>
</listitem>
<listitem>
<simpara>You have access to the OpenShift Container Platform web console.</simpara>
</listitem>
<listitem>
<simpara>You installed the <literal>oc</literal> CLI.</simpara>
</listitem>
<listitem>
<simpara>You installed the <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_openshift_data_foundation/4.10">OpenShift Data Foundation Operator</link> to provide object storage and Ceph RGW object storage.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Create the object bucket claim using the <literal>ocs-storagecluster-ceph-rgw</literal> storage class. For example:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">cat &lt;&lt;EOF | oc apply -f -
apiVersion: objectbucket.io/v1alpha1
kind: ObjectBucketClaim
metadata:
  name: rgwbucket
  namespace: openshift-storage <co xml:id="CO11-1"/>
spec:
  storageClassName: ocs-storagecluster-ceph-rgw
  generateBucketName: rgwbucket
EOF</programlisting>
<calloutlist>
<callout arearefs="CO11-1">
<para>Alternatively, you can use the <literal>openshift-image-registry</literal> namespace.</para>
</callout>
</calloutlist>
</listitem>
<listitem>
<simpara>Get the bucket name by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ bucket_name=$(oc get obc -n openshift-storage rgwbucket -o jsonpath='{.spec.bucketName}')</programlisting>
</listitem>
<listitem>
<simpara>Get the AWS credentials by entering the following commands:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ AWS_ACCESS_KEY_ID=$(oc get secret -n openshift-storage rgwbucket -o jsonpath='{.data.AWS_ACCESS_KEY_ID}' | base64 --decode)</programlisting>
<programlisting language="terminal" linenumbering="unnumbered">$ AWS_SECRET_ACCESS_KEY=$(oc get secret -n openshift-storage rgwbucket -o jsonpath='{.data.AWS_SECRET_ACCESS_KEY}' | base64 --decode)</programlisting>
</listitem>
<listitem>
<simpara>Create the secret <literal>image-registry-private-configuration-user</literal> with the AWS credentials for the new bucket under <literal>openshift-image-registry project</literal> by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc create secret generic image-registry-private-configuration-user --from-literal=REGISTRY_STORAGE_S3_ACCESSKEY=${AWS_ACCESS_KEY_ID} --from-literal=REGISTRY_STORAGE_S3_SECRETKEY=${AWS_SECRET_ACCESS_KEY} --namespace openshift-image-registry</programlisting>
</listitem>
<listitem>
<simpara>Get the <literal>buckethost</literal> value by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ route_host=$(oc get objectbucket $bucket_name -n openshift-storage -o=jsonpath='{.spec.endpoint.bucketHost}')</programlisting>
</listitem>
<listitem>
<simpara>Create a config map that uses an ingress certificate by entering the following commands:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc extract secret/router-certs-default  -n openshift-ingress  --confirm</programlisting>
<programlisting language="terminal" linenumbering="unnumbered">$ oc create configmap image-registry-s3-bundle --from-file=ca-bundle.crt=./tls.crt  -n openshift-config</programlisting>
</listitem>
<listitem>
<simpara>Configure the image registry to use the Ceph RGW object storage by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc patch config.image/cluster -p '{"spec":{"managementState":"Managed","replicas":2,"storage":{"managementState":"Unmanaged","s3":{"bucket":'\"${bucket_name}\"',"region":"us-east-1","regionEndpoint":'\"https://${route_host}\"',"virtualHostedStyle":false,"encrypt":false,"trustedCA":{"name":"image-registry-s3-bundle"}}}}}' --type=merge</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="registry-configuring-registry-storage-rhodf-nooba_configuring-registry-storage-vsphere">
<title>Configuring the Image Registry Operator to use Noobaa storage with Red Hat OpenShift Data Foundation</title>
<simpara>Red Hat OpenShift Data Foundation integrates multiple storage types that you can use with the OpenShift image registry:</simpara>
<itemizedlist>
<listitem>
<simpara>Ceph, a shared and distributed file system and on-premises object storage</simpara>
</listitem>
<listitem>
<simpara>NooBaa, providing a Multicloud Object Gateway</simpara>
</listitem>
</itemizedlist>
<simpara>This document outlines the procedure to configure the image registry to use Noobaa storage.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have access to the cluster as a user with the <literal>cluster-admin</literal> role.</simpara>
</listitem>
<listitem>
<simpara>You have access to the OpenShift Container Platform web console.</simpara>
</listitem>
<listitem>
<simpara>You installed the <literal>oc</literal> CLI.</simpara>
</listitem>
<listitem>
<simpara>You installed the <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_openshift_data_foundation/4.10">OpenShift Data Foundation Operator</link> to provide object storage and Noobaa object storage.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Create the object bucket claim using the <literal>openshift-storage.noobaa.io</literal> storage class. For example:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">cat &lt;&lt;EOF | oc apply -f -
apiVersion: objectbucket.io/v1alpha1
kind: ObjectBucketClaim
metadata:
  name: noobaatest
  namespace: openshift-storage <co xml:id="CO12-1"/>
spec:
  storageClassName: openshift-storage.noobaa.io
  generateBucketName: noobaatest
EOF</programlisting>
<calloutlist>
<callout arearefs="CO12-1">
<para>Alternatively, you can use the <literal>openshift-image-registry</literal> namespace.</para>
</callout>
</calloutlist>
</listitem>
<listitem>
<simpara>Get the bucket name by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ bucket_name=$(oc get obc -n openshift-storage noobaatest -o jsonpath='{.spec.bucketName}')</programlisting>
</listitem>
<listitem>
<simpara>Get the AWS credentials by entering the following commands:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ AWS_ACCESS_KEY_ID=$(oc get secret -n openshift-storage noobaatest -o yaml | grep -w "AWS_ACCESS_KEY_ID:" | head -n1 | awk '{print $2}' | base64 --decode)</programlisting>
<programlisting language="terminal" linenumbering="unnumbered">$ AWS_SECRET_ACCESS_KEY=$(oc get secret -n openshift-storage noobaatest -o yaml | grep -w "AWS_SECRET_ACCESS_KEY:" | head -n1 | awk '{print $2}' | base64 --decode)</programlisting>
</listitem>
<listitem>
<simpara>Create the secret <literal>image-registry-private-configuration-user</literal> with the AWS credentials for the new bucket under <literal>openshift-image-registry project</literal> by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc create secret generic image-registry-private-configuration-user --from-literal=REGISTRY_STORAGE_S3_ACCESSKEY=${AWS_ACCESS_KEY_ID} --from-literal=REGISTRY_STORAGE_S3_SECRETKEY=${AWS_SECRET_ACCESS_KEY} --namespace openshift-image-registry</programlisting>
</listitem>
<listitem>
<simpara>Get the route host by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ route_host=$(oc get route s3 -n openshift-storage -o=jsonpath='{.spec.host}')</programlisting>
</listitem>
<listitem>
<simpara>Create a config map that uses an ingress certificate by entering the following commands:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc extract secret/router-certs-default  -n openshift-ingress  --confirm</programlisting>
<programlisting language="terminal" linenumbering="unnumbered">$ oc create configmap image-registry-s3-bundle --from-file=ca-bundle.crt=./tls.crt  -n openshift-config</programlisting>
</listitem>
<listitem>
<simpara>Configure the image registry to use the Nooba object storage by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc patch config.image/cluster -p '{"spec":{"managementState":"Managed","replicas":2,"storage":{"managementState":"Unmanaged","s3":{"bucket":'\"${bucket_name}\"',"region":"us-east-1","regionEndpoint":'\"https://${route_host}\"',"virtualHostedStyle":false,"encrypt":false,"trustedCA":{"name":"image-registry-s3-bundle"}}}}}' --type=merge</programlisting>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="registry-configuring-registry-storage-rhodf-cephfs_configuring-registry-storage-vsphere">
<title>Configuring the Image Registry Operator to use CephFS storage with Red Hat OpenShift Data Foundation</title>
<simpara>Red Hat OpenShift Data Foundation integrates multiple storage types that you can use with the OpenShift image registry:</simpara>
<itemizedlist>
<listitem>
<simpara>Ceph, a shared and distributed file system and on-premises object storage</simpara>
</listitem>
<listitem>
<simpara>NooBaa, providing a Multicloud Object Gateway</simpara>
</listitem>
</itemizedlist>
<simpara>This document outlines the procedure to configure the image registry to use CephFS storage.</simpara>
<note>
<simpara>CephFS uses persistent volume claim (PVC) storage. It is not recommended to use PVCs for image registry storage if there are other options are available, such as Ceph RGW or Noobaa.</simpara>
</note>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have access to the cluster as a user with the <literal>cluster-admin</literal> role.</simpara>
</listitem>
<listitem>
<simpara>You have access to the OpenShift Container Platform web console.</simpara>
</listitem>
<listitem>
<simpara>You installed the <literal>oc</literal> CLI.</simpara>
</listitem>
<listitem>
<simpara>You installed the <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_openshift_data_foundation/4.10">OpenShift Data Foundation Operator</link> to provide object storage and CephFS file storage.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Create a PVC to use the <literal>cephfs</literal> storage class. For example:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">cat &lt;&lt;EOF | oc apply -f -
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
 name: registry-storage-pvc
 namespace: openshift-image-registry
spec:
 accessModes:
 - ReadWriteMany
 resources:
   requests:
     storage: 100Gi
 storageClassName: ocs-storagecluster-cephfs
EOF</programlisting>
</listitem>
<listitem>
<simpara>Configure the image registry to use the CephFS file system storage by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc patch config.image/cluster -p '{"spec":{"managementState":"Managed","replicas":2,"storage":{"managementState":"Unmanaged","pvc":{"claim":"registry-storage-pvc"}}}}' --type=merge</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="configuring-registry-storage-vsphere-addtl-resources" role="_additional-resources">
<title>Additional resources</title>
<itemizedlist>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/openshift_container_platform/4.14/html-single/scalability_and_performance/#optimizing-storage">Recommended configurable storage technology</link></simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_openshift_data_foundation/4.10/html-single/managing_and_allocating_storage_resources/index#configuring-image-registry-to-use-openshift-data-foundation_rhodf">Configuring Image Registry to use OpenShift Data Foundation</link></simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="configuring-registry-storage-rhodf">
<title>Configuring the registry for Red Hat OpenShift Data Foundation</title>

<simpara>To configure the OpenShift image registry on bare metal and vSphere to use Red Hat OpenShift Data Foundation storage, you must install OpenShift Data Foundation and then configure image registry using Ceph or Noobaa.</simpara>
<section xml:id="registry-configuring-registry-storage-rhodf-cephrgw_configuring-registry-storage-rhodf">
<title>Configuring the Image Registry Operator to use Ceph RGW storage with Red Hat OpenShift Data Foundation</title>
<simpara>Red Hat OpenShift Data Foundation integrates multiple storage types that you can use with the OpenShift image registry:</simpara>
<itemizedlist>
<listitem>
<simpara>Ceph, a shared and distributed file system and on-premises object storage</simpara>
</listitem>
<listitem>
<simpara>NooBaa, providing a Multicloud Object Gateway</simpara>
</listitem>
</itemizedlist>
<simpara>This document outlines the procedure to configure the image registry to use Ceph RGW storage.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have access to the cluster as a user with the <literal>cluster-admin</literal> role.</simpara>
</listitem>
<listitem>
<simpara>You have access to the OpenShift Container Platform web console.</simpara>
</listitem>
<listitem>
<simpara>You installed the <literal>oc</literal> CLI.</simpara>
</listitem>
<listitem>
<simpara>You installed the <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_openshift_data_foundation/4.10">OpenShift Data Foundation Operator</link> to provide object storage and Ceph RGW object storage.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Create the object bucket claim using the <literal>ocs-storagecluster-ceph-rgw</literal> storage class. For example:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">cat &lt;&lt;EOF | oc apply -f -
apiVersion: objectbucket.io/v1alpha1
kind: ObjectBucketClaim
metadata:
  name: rgwbucket
  namespace: openshift-storage <co xml:id="CO13-1"/>
spec:
  storageClassName: ocs-storagecluster-ceph-rgw
  generateBucketName: rgwbucket
EOF</programlisting>
<calloutlist>
<callout arearefs="CO13-1">
<para>Alternatively, you can use the <literal>openshift-image-registry</literal> namespace.</para>
</callout>
</calloutlist>
</listitem>
<listitem>
<simpara>Get the bucket name by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ bucket_name=$(oc get obc -n openshift-storage rgwbucket -o jsonpath='{.spec.bucketName}')</programlisting>
</listitem>
<listitem>
<simpara>Get the AWS credentials by entering the following commands:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ AWS_ACCESS_KEY_ID=$(oc get secret -n openshift-storage rgwbucket -o jsonpath='{.data.AWS_ACCESS_KEY_ID}' | base64 --decode)</programlisting>
<programlisting language="terminal" linenumbering="unnumbered">$ AWS_SECRET_ACCESS_KEY=$(oc get secret -n openshift-storage rgwbucket -o jsonpath='{.data.AWS_SECRET_ACCESS_KEY}' | base64 --decode)</programlisting>
</listitem>
<listitem>
<simpara>Create the secret <literal>image-registry-private-configuration-user</literal> with the AWS credentials for the new bucket under <literal>openshift-image-registry project</literal> by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc create secret generic image-registry-private-configuration-user --from-literal=REGISTRY_STORAGE_S3_ACCESSKEY=${AWS_ACCESS_KEY_ID} --from-literal=REGISTRY_STORAGE_S3_SECRETKEY=${AWS_SECRET_ACCESS_KEY} --namespace openshift-image-registry</programlisting>
</listitem>
<listitem>
<simpara>Get the <literal>buckethost</literal> value by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ route_host=$(oc get objectbucket $bucket_name -n openshift-storage -o=jsonpath='{.spec.endpoint.bucketHost}')</programlisting>
</listitem>
<listitem>
<simpara>Create a config map that uses an ingress certificate by entering the following commands:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc extract secret/router-certs-default  -n openshift-ingress  --confirm</programlisting>
<programlisting language="terminal" linenumbering="unnumbered">$ oc create configmap image-registry-s3-bundle --from-file=ca-bundle.crt=./tls.crt  -n openshift-config</programlisting>
</listitem>
<listitem>
<simpara>Configure the image registry to use the Ceph RGW object storage by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc patch config.image/cluster -p '{"spec":{"managementState":"Managed","replicas":2,"storage":{"managementState":"Unmanaged","s3":{"bucket":'\"${bucket_name}\"',"region":"us-east-1","regionEndpoint":'\"https://${route_host}\"',"virtualHostedStyle":false,"encrypt":false,"trustedCA":{"name":"image-registry-s3-bundle"}}}}}' --type=merge</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="registry-configuring-registry-storage-rhodf-nooba_configuring-registry-storage-rhodf">
<title>Configuring the Image Registry Operator to use Noobaa storage with Red Hat OpenShift Data Foundation</title>
<simpara>Red Hat OpenShift Data Foundation integrates multiple storage types that you can use with the OpenShift image registry:</simpara>
<itemizedlist>
<listitem>
<simpara>Ceph, a shared and distributed file system and on-premises object storage</simpara>
</listitem>
<listitem>
<simpara>NooBaa, providing a Multicloud Object Gateway</simpara>
</listitem>
</itemizedlist>
<simpara>This document outlines the procedure to configure the image registry to use Noobaa storage.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have access to the cluster as a user with the <literal>cluster-admin</literal> role.</simpara>
</listitem>
<listitem>
<simpara>You have access to the OpenShift Container Platform web console.</simpara>
</listitem>
<listitem>
<simpara>You installed the <literal>oc</literal> CLI.</simpara>
</listitem>
<listitem>
<simpara>You installed the <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_openshift_data_foundation/4.10">OpenShift Data Foundation Operator</link> to provide object storage and Noobaa object storage.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Create the object bucket claim using the <literal>openshift-storage.noobaa.io</literal> storage class. For example:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">cat &lt;&lt;EOF | oc apply -f -
apiVersion: objectbucket.io/v1alpha1
kind: ObjectBucketClaim
metadata:
  name: noobaatest
  namespace: openshift-storage <co xml:id="CO14-1"/>
spec:
  storageClassName: openshift-storage.noobaa.io
  generateBucketName: noobaatest
EOF</programlisting>
<calloutlist>
<callout arearefs="CO14-1">
<para>Alternatively, you can use the <literal>openshift-image-registry</literal> namespace.</para>
</callout>
</calloutlist>
</listitem>
<listitem>
<simpara>Get the bucket name by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ bucket_name=$(oc get obc -n openshift-storage noobaatest -o jsonpath='{.spec.bucketName}')</programlisting>
</listitem>
<listitem>
<simpara>Get the AWS credentials by entering the following commands:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ AWS_ACCESS_KEY_ID=$(oc get secret -n openshift-storage noobaatest -o yaml | grep -w "AWS_ACCESS_KEY_ID:" | head -n1 | awk '{print $2}' | base64 --decode)</programlisting>
<programlisting language="terminal" linenumbering="unnumbered">$ AWS_SECRET_ACCESS_KEY=$(oc get secret -n openshift-storage noobaatest -o yaml | grep -w "AWS_SECRET_ACCESS_KEY:" | head -n1 | awk '{print $2}' | base64 --decode)</programlisting>
</listitem>
<listitem>
<simpara>Create the secret <literal>image-registry-private-configuration-user</literal> with the AWS credentials for the new bucket under <literal>openshift-image-registry project</literal> by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc create secret generic image-registry-private-configuration-user --from-literal=REGISTRY_STORAGE_S3_ACCESSKEY=${AWS_ACCESS_KEY_ID} --from-literal=REGISTRY_STORAGE_S3_SECRETKEY=${AWS_SECRET_ACCESS_KEY} --namespace openshift-image-registry</programlisting>
</listitem>
<listitem>
<simpara>Get the route host by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ route_host=$(oc get route s3 -n openshift-storage -o=jsonpath='{.spec.host}')</programlisting>
</listitem>
<listitem>
<simpara>Create a config map that uses an ingress certificate by entering the following commands:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc extract secret/router-certs-default  -n openshift-ingress  --confirm</programlisting>
<programlisting language="terminal" linenumbering="unnumbered">$ oc create configmap image-registry-s3-bundle --from-file=ca-bundle.crt=./tls.crt  -n openshift-config</programlisting>
</listitem>
<listitem>
<simpara>Configure the image registry to use the Nooba object storage by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc patch config.image/cluster -p '{"spec":{"managementState":"Managed","replicas":2,"storage":{"managementState":"Unmanaged","s3":{"bucket":'\"${bucket_name}\"',"region":"us-east-1","regionEndpoint":'\"https://${route_host}\"',"virtualHostedStyle":false,"encrypt":false,"trustedCA":{"name":"image-registry-s3-bundle"}}}}}' --type=merge</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="registry-configuring-registry-storage-rhodf-cephfs_configuring-registry-storage-rhodf">
<title>Configuring the Image Registry Operator to use CephFS storage with Red Hat OpenShift Data Foundation</title>
<simpara>Red Hat OpenShift Data Foundation integrates multiple storage types that you can use with the OpenShift image registry:</simpara>
<itemizedlist>
<listitem>
<simpara>Ceph, a shared and distributed file system and on-premises object storage</simpara>
</listitem>
<listitem>
<simpara>NooBaa, providing a Multicloud Object Gateway</simpara>
</listitem>
</itemizedlist>
<simpara>This document outlines the procedure to configure the image registry to use CephFS storage.</simpara>
<note>
<simpara>CephFS uses persistent volume claim (PVC) storage. It is not recommended to use PVCs for image registry storage if there are other options are available, such as Ceph RGW or Noobaa.</simpara>
</note>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have access to the cluster as a user with the <literal>cluster-admin</literal> role.</simpara>
</listitem>
<listitem>
<simpara>You have access to the OpenShift Container Platform web console.</simpara>
</listitem>
<listitem>
<simpara>You installed the <literal>oc</literal> CLI.</simpara>
</listitem>
<listitem>
<simpara>You installed the <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_openshift_data_foundation/4.10">OpenShift Data Foundation Operator</link> to provide object storage and CephFS file storage.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Create a PVC to use the <literal>cephfs</literal> storage class. For example:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">cat &lt;&lt;EOF | oc apply -f -
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
 name: registry-storage-pvc
 namespace: openshift-image-registry
spec:
 accessModes:
 - ReadWriteMany
 resources:
   requests:
     storage: 100Gi
 storageClassName: ocs-storagecluster-cephfs
EOF</programlisting>
</listitem>
<listitem>
<simpara>Configure the image registry to use the CephFS file system storage by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc patch config.image/cluster -p '{"spec":{"managementState":"Managed","replicas":2,"storage":{"managementState":"Unmanaged","pvc":{"claim":"registry-storage-pvc"}}}}' --type=merge</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="configuring-registry-storage-ocs" role="_additional-resources">
<title>Additional resources</title>
<itemizedlist>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_openshift_data_foundation/4.10/html-single/managing_and_allocating_storage_resources/index#configuring-image-registry-to-use-openshift-data-foundation_rhodf">Configuring Image Registry to use OpenShift Data Foundation</link></simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/solutions/6719951">Performance tuning guide for Multicloud Object Gateway (NooBaa)</link></simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="configuring-registry-storage-nutanix">
<title>Configuring the registry for Nutanix</title>

<simpara>By following the steps outlined in this documentation, users can optimize container image distribution, security, and access controls, enabling a robust foundation for Nutanix applications on OpenShift Container Platform</simpara>
<section xml:id="registry-removed_configuring-registry-storage-nutanix">
<title>Image registry removed during installation</title>
<simpara>On platforms that do not provide shareable object storage, the OpenShift Image Registry Operator bootstraps itself as <literal>Removed</literal>. This allows <literal>openshift-installer</literal> to complete installations on these platform types.</simpara>
<simpara>After installation, you must edit the Image Registry Operator configuration to switch the <literal>managementState</literal> from <literal>Removed</literal> to <literal>Managed</literal>.</simpara>
</section>
<section xml:id="registry-change-management-state_configuring-registry-storage-nutanix">
<title>Changing the image registry&#8217;s management state</title>
<simpara>To start the image registry, you must change the Image Registry Operator configuration&#8217;s <literal>managementState</literal> from <literal>Removed</literal> to <literal>Managed</literal>.</simpara>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>Change <literal>managementState</literal> Image Registry Operator configuration from <literal>Removed</literal> to <literal>Managed</literal>. For example:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"managementState":"Managed"}}'</programlisting>
</listitem>
</itemizedlist>
</section>
<section xml:id="installation-registry-storage-config_configuring-registry-storage-nutanix">
<title>Image registry storage configuration</title>
<simpara>The Image Registry Operator is not initially available for platforms that do
not provide default storage. After installation, you must configure your
registry to use storage so that the Registry Operator is made available.</simpara>
<simpara>Instructions are shown for configuring a persistent volume, which is required for production clusters. Where applicable, instructions are shown for configuring an empty directory as the storage location, which is available for only non-production clusters.</simpara>
<simpara>Additional instructions are provided for allowing the image registry to use block storage types by using the <literal>Recreate</literal> rollout strategy during upgrades.</simpara>
<section xml:id="configuring-registry-storage-nutanix_configuring-registry-storage-nutanix">
<title>Configuring registry storage for Nutanix</title>
<simpara>As a cluster administrator, following installation you must configure your registry to use storage.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have access to the cluster as a user with the <literal>cluster-admin</literal> role.</simpara>
</listitem>
<listitem>
<simpara>You have a cluster on Nutanix.</simpara>
</listitem>
<listitem>
<simpara>You have provisioned persistent storage for your cluster, such as Red Hat OpenShift Data Foundation.</simpara>
<important>
<simpara>OpenShift Container Platform supports <literal>ReadWriteOnce</literal> access for image registry storage when you have only one replica. <literal>ReadWriteOnce</literal> access also requires that the registry uses the <literal>Recreate</literal> rollout strategy. To deploy an image registry that supports high availability with two or more replicas, <literal>ReadWriteMany</literal> access is required.</simpara>
</important>
</listitem>
<listitem>
<simpara>You must have 100 Gi capacity.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>To configure your registry to use storage, change the <literal>spec.storage.pvc</literal> in the <literal>configs.imageregistry/cluster</literal> resource.</simpara>
<note>
<simpara>When you use shared storage, review your security settings to prevent outside access.</simpara>
</note>
</listitem>
<listitem>
<simpara>Verify that you do not have a registry pod:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc get pod -n openshift-image-registry -l docker-registry=default</programlisting>
<formalpara>
<title>Example output</title>
<para>
<programlisting language="terminal" linenumbering="unnumbered">No resourses found in openshift-image-registry namespace</programlisting>
</para>
</formalpara>
<note>
<simpara>If you do have a registry pod in your output, you do not need to continue with this procedure.</simpara>
</note>
</listitem>
<listitem>
<simpara>Check the registry configuration:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc edit configs.imageregistry.operator.openshift.io</programlisting>
<formalpara>
<title>Example output</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">storage:
  pvc:
    claim: <co xml:id="CO15-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO15-1">
<para>Leave the <literal>claim</literal> field blank to allow the automatic creation of an <literal>image-registry-storage</literal> persistent volume claim (PVC). The PVC is generated based on the default storage class. However, be aware that the default storage class might provide ReadWriteOnce (RWO) volumes, such as a RADOS Block Device (RBD), which can cause issues when you replicate to more than one replica.</para>
</callout>
</calloutlist>
</listitem>
<listitem>
<simpara>Check the <literal>clusteroperator</literal> status:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc get clusteroperator image-registry</programlisting>
<formalpara>
<title>Example output</title>
<para>
<programlisting language="terminal" linenumbering="unnumbered">NAME             VERSION                              AVAILABLE   PROGRESSING   DEGRADED   SINCE   MESSAGE
image-registry   4.13                                  True        False         False      6h50m</programlisting>
</para>
</formalpara>
</listitem>
</orderedlist>
</section>
<section xml:id="installation-registry-storage-non-production_configuring-registry-storage-nutanix">
<title>Configuring storage for the image registry in non-production clusters</title>
<simpara>You must configure storage for the Image Registry Operator. For non-production
clusters, you can set the image registry to an empty directory. If you do so,
all images are lost if you restart the registry.</simpara>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>To set the image registry storage to an empty directory:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"storage":{"emptyDir":{}}}}'</programlisting>
<warning>
<simpara>Configure this option for only non-production clusters.</simpara>
</warning>
<simpara>If you run this command before the Image Registry Operator initializes its
components, the <literal>oc patch</literal> command fails with the following error:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">Error from server (NotFound): configs.imageregistry.operator.openshift.io "cluster" not found</programlisting>
<simpara>Wait a few minutes and run the command again.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="installation-registry-storage-block-recreate-rollout-nutanix_configuring-registry-storage-nutanix">
<title>Configuring block registry storage for Nutanix volumes</title>
<simpara>To allow the image registry to use block storage types such as Nutanix volumes during upgrades as a cluster administrator, you can use the <literal>Recreate</literal> rollout strategy.</simpara>
<important>
<simpara>Block storage volumes, or block persistent volumes, are supported but not recommended for use with the image registry on production clusters. An installation where the registry is configured on block storage is not highly available because the registry cannot have more than one replica.</simpara>
<simpara>If you choose to use a block storage volume with the image registry, you must use a filesystem persistent volume claim (PVC).</simpara>
</important>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Enter the following command to set the image registry storage as a block storage type, patch the registry so that it uses the <literal>Recreate</literal> rollout strategy, and runs with only one (<literal>1</literal>) replica:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc patch config.imageregistry.operator.openshift.io/cluster --type=merge -p '{"spec":{"rolloutStrategy":"Recreate","replicas":1}}'</programlisting>
</listitem>
<listitem>
<simpara>Provision the PV for the block storage device, and create a PVC for that volume. The requested block volume uses the ReadWriteOnce (RWO) access mode.</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Create a <literal>pvc.yaml</literal> file with the following contents to define a Nutanix <literal>PersistentVolumeClaim</literal> object:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: image-registry-storage <co xml:id="CO16-1"/>
  namespace: openshift-image-registry <co xml:id="CO16-2"/>
spec:
  accessModes:
  - ReadWriteOnce <co xml:id="CO16-3"/>
  resources:
    requests:
      storage: 100Gi <co xml:id="CO16-4"/></programlisting>
<calloutlist>
<callout arearefs="CO16-1">
<para>A unique name that represents the <literal>PersistentVolumeClaim</literal> object.</para>
</callout>
<callout arearefs="CO16-2">
<para>The namespace for the <literal>PersistentVolumeClaim</literal> object, which is <literal>openshift-image-registry</literal>.</para>
</callout>
<callout arearefs="CO16-3">
<para>The access mode of the persistent volume claim. With <literal>ReadWriteOnce</literal>, the volume can be mounted with read and write permissions by a single node.</para>
</callout>
<callout arearefs="CO16-4">
<para>The size of the persistent volume claim.</para>
</callout>
</calloutlist>
</listitem>
<listitem>
<simpara>Enter the following command to create the <literal>PersistentVolumeClaim</literal> object from the file:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc create -f pvc.yaml -n openshift-image-registry</programlisting>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>Enter the following command to edit the registry configuration so that it references the correct PVC:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc edit config.imageregistry.operator.openshift.io -o yaml</programlisting>
<formalpara>
<title>Example output</title>
<para>
<programlisting language="yaml" linenumbering="unnumbered">storage:
  pvc:
    claim: <co xml:id="CO17-1"/></programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO17-1">
<para>By creating a custom PVC, you can leave the <literal>claim</literal> field blank for the default automatic creation of an <literal>image-registry-storage</literal> PVC.</para>
</callout>
</calloutlist>
</listitem>
</orderedlist>
</section>
<section xml:id="registry-configuring-registry-storage-rhodf-cephrgw_configuring-registry-storage-nutanix">
<title>Configuring the Image Registry Operator to use Ceph RGW storage with Red Hat OpenShift Data Foundation</title>
<simpara>Red Hat OpenShift Data Foundation integrates multiple storage types that you can use with the OpenShift image registry:</simpara>
<itemizedlist>
<listitem>
<simpara>Ceph, a shared and distributed file system and on-premises object storage</simpara>
</listitem>
<listitem>
<simpara>NooBaa, providing a Multicloud Object Gateway</simpara>
</listitem>
</itemizedlist>
<simpara>This document outlines the procedure to configure the image registry to use Ceph RGW storage.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have access to the cluster as a user with the <literal>cluster-admin</literal> role.</simpara>
</listitem>
<listitem>
<simpara>You have access to the OpenShift Container Platform web console.</simpara>
</listitem>
<listitem>
<simpara>You installed the <literal>oc</literal> CLI.</simpara>
</listitem>
<listitem>
<simpara>You installed the <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_openshift_data_foundation/4.10">OpenShift Data Foundation Operator</link> to provide object storage and Ceph RGW object storage.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Create the object bucket claim using the <literal>ocs-storagecluster-ceph-rgw</literal> storage class. For example:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">cat &lt;&lt;EOF | oc apply -f -
apiVersion: objectbucket.io/v1alpha1
kind: ObjectBucketClaim
metadata:
  name: rgwbucket
  namespace: openshift-storage <co xml:id="CO18-1"/>
spec:
  storageClassName: ocs-storagecluster-ceph-rgw
  generateBucketName: rgwbucket
EOF</programlisting>
<calloutlist>
<callout arearefs="CO18-1">
<para>Alternatively, you can use the <literal>openshift-image-registry</literal> namespace.</para>
</callout>
</calloutlist>
</listitem>
<listitem>
<simpara>Get the bucket name by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ bucket_name=$(oc get obc -n openshift-storage rgwbucket -o jsonpath='{.spec.bucketName}')</programlisting>
</listitem>
<listitem>
<simpara>Get the AWS credentials by entering the following commands:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ AWS_ACCESS_KEY_ID=$(oc get secret -n openshift-storage rgwbucket -o jsonpath='{.data.AWS_ACCESS_KEY_ID}' | base64 --decode)</programlisting>
<programlisting language="terminal" linenumbering="unnumbered">$ AWS_SECRET_ACCESS_KEY=$(oc get secret -n openshift-storage rgwbucket -o jsonpath='{.data.AWS_SECRET_ACCESS_KEY}' | base64 --decode)</programlisting>
</listitem>
<listitem>
<simpara>Create the secret <literal>image-registry-private-configuration-user</literal> with the AWS credentials for the new bucket under <literal>openshift-image-registry project</literal> by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc create secret generic image-registry-private-configuration-user --from-literal=REGISTRY_STORAGE_S3_ACCESSKEY=${AWS_ACCESS_KEY_ID} --from-literal=REGISTRY_STORAGE_S3_SECRETKEY=${AWS_SECRET_ACCESS_KEY} --namespace openshift-image-registry</programlisting>
</listitem>
<listitem>
<simpara>Get the <literal>buckethost</literal> value by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ route_host=$(oc get objectbucket $bucket_name -n openshift-storage -o=jsonpath='{.spec.endpoint.bucketHost}')</programlisting>
</listitem>
<listitem>
<simpara>Create a config map that uses an ingress certificate by entering the following commands:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc extract secret/router-certs-default  -n openshift-ingress  --confirm</programlisting>
<programlisting language="terminal" linenumbering="unnumbered">$ oc create configmap image-registry-s3-bundle --from-file=ca-bundle.crt=./tls.crt  -n openshift-config</programlisting>
</listitem>
<listitem>
<simpara>Configure the image registry to use the Ceph RGW object storage by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc patch config.image/cluster -p '{"spec":{"managementState":"Managed","replicas":2,"storage":{"managementState":"Unmanaged","s3":{"bucket":'\"${bucket_name}\"',"region":"us-east-1","regionEndpoint":'\"https://${route_host}\"',"virtualHostedStyle":false,"encrypt":false,"trustedCA":{"name":"image-registry-s3-bundle"}}}}}' --type=merge</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="registry-configuring-registry-storage-rhodf-nooba_configuring-registry-storage-nutanix">
<title>Configuring the Image Registry Operator to use Noobaa storage with Red Hat OpenShift Data Foundation</title>
<simpara>Red Hat OpenShift Data Foundation integrates multiple storage types that you can use with the OpenShift image registry:</simpara>
<itemizedlist>
<listitem>
<simpara>Ceph, a shared and distributed file system and on-premises object storage</simpara>
</listitem>
<listitem>
<simpara>NooBaa, providing a Multicloud Object Gateway</simpara>
</listitem>
</itemizedlist>
<simpara>This document outlines the procedure to configure the image registry to use Noobaa storage.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have access to the cluster as a user with the <literal>cluster-admin</literal> role.</simpara>
</listitem>
<listitem>
<simpara>You have access to the OpenShift Container Platform web console.</simpara>
</listitem>
<listitem>
<simpara>You installed the <literal>oc</literal> CLI.</simpara>
</listitem>
<listitem>
<simpara>You installed the <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_openshift_data_foundation/4.10">OpenShift Data Foundation Operator</link> to provide object storage and Noobaa object storage.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Create the object bucket claim using the <literal>openshift-storage.noobaa.io</literal> storage class. For example:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">cat &lt;&lt;EOF | oc apply -f -
apiVersion: objectbucket.io/v1alpha1
kind: ObjectBucketClaim
metadata:
  name: noobaatest
  namespace: openshift-storage <co xml:id="CO19-1"/>
spec:
  storageClassName: openshift-storage.noobaa.io
  generateBucketName: noobaatest
EOF</programlisting>
<calloutlist>
<callout arearefs="CO19-1">
<para>Alternatively, you can use the <literal>openshift-image-registry</literal> namespace.</para>
</callout>
</calloutlist>
</listitem>
<listitem>
<simpara>Get the bucket name by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ bucket_name=$(oc get obc -n openshift-storage noobaatest -o jsonpath='{.spec.bucketName}')</programlisting>
</listitem>
<listitem>
<simpara>Get the AWS credentials by entering the following commands:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ AWS_ACCESS_KEY_ID=$(oc get secret -n openshift-storage noobaatest -o yaml | grep -w "AWS_ACCESS_KEY_ID:" | head -n1 | awk '{print $2}' | base64 --decode)</programlisting>
<programlisting language="terminal" linenumbering="unnumbered">$ AWS_SECRET_ACCESS_KEY=$(oc get secret -n openshift-storage noobaatest -o yaml | grep -w "AWS_SECRET_ACCESS_KEY:" | head -n1 | awk '{print $2}' | base64 --decode)</programlisting>
</listitem>
<listitem>
<simpara>Create the secret <literal>image-registry-private-configuration-user</literal> with the AWS credentials for the new bucket under <literal>openshift-image-registry project</literal> by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc create secret generic image-registry-private-configuration-user --from-literal=REGISTRY_STORAGE_S3_ACCESSKEY=${AWS_ACCESS_KEY_ID} --from-literal=REGISTRY_STORAGE_S3_SECRETKEY=${AWS_SECRET_ACCESS_KEY} --namespace openshift-image-registry</programlisting>
</listitem>
<listitem>
<simpara>Get the route host by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ route_host=$(oc get route s3 -n openshift-storage -o=jsonpath='{.spec.host}')</programlisting>
</listitem>
<listitem>
<simpara>Create a config map that uses an ingress certificate by entering the following commands:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc extract secret/router-certs-default  -n openshift-ingress  --confirm</programlisting>
<programlisting language="terminal" linenumbering="unnumbered">$ oc create configmap image-registry-s3-bundle --from-file=ca-bundle.crt=./tls.crt  -n openshift-config</programlisting>
</listitem>
<listitem>
<simpara>Configure the image registry to use the Nooba object storage by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc patch config.image/cluster -p '{"spec":{"managementState":"Managed","replicas":2,"storage":{"managementState":"Unmanaged","s3":{"bucket":'\"${bucket_name}\"',"region":"us-east-1","regionEndpoint":'\"https://${route_host}\"',"virtualHostedStyle":false,"encrypt":false,"trustedCA":{"name":"image-registry-s3-bundle"}}}}}' --type=merge</programlisting>
</listitem>
</orderedlist>
</section>
</section>
<section xml:id="registry-configuring-registry-storage-rhodf-cephfs_configuring-registry-storage-nutanix">
<title>Configuring the Image Registry Operator to use CephFS storage with Red Hat OpenShift Data Foundation</title>
<simpara>Red Hat OpenShift Data Foundation integrates multiple storage types that you can use with the OpenShift image registry:</simpara>
<itemizedlist>
<listitem>
<simpara>Ceph, a shared and distributed file system and on-premises object storage</simpara>
</listitem>
<listitem>
<simpara>NooBaa, providing a Multicloud Object Gateway</simpara>
</listitem>
</itemizedlist>
<simpara>This document outlines the procedure to configure the image registry to use CephFS storage.</simpara>
<note>
<simpara>CephFS uses persistent volume claim (PVC) storage. It is not recommended to use PVCs for image registry storage if there are other options are available, such as Ceph RGW or Noobaa.</simpara>
</note>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have access to the cluster as a user with the <literal>cluster-admin</literal> role.</simpara>
</listitem>
<listitem>
<simpara>You have access to the OpenShift Container Platform web console.</simpara>
</listitem>
<listitem>
<simpara>You installed the <literal>oc</literal> CLI.</simpara>
</listitem>
<listitem>
<simpara>You installed the <link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_openshift_data_foundation/4.10">OpenShift Data Foundation Operator</link> to provide object storage and CephFS file storage.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Create a PVC to use the <literal>cephfs</literal> storage class. For example:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">cat &lt;&lt;EOF | oc apply -f -
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
 name: registry-storage-pvc
 namespace: openshift-image-registry
spec:
 accessModes:
 - ReadWriteMany
 resources:
   requests:
     storage: 100Gi
 storageClassName: ocs-storagecluster-cephfs
EOF</programlisting>
</listitem>
<listitem>
<simpara>Configure the image registry to use the CephFS file system storage by entering the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc patch config.image/cluster -p '{"spec":{"managementState":"Managed","replicas":2,"storage":{"managementState":"Unmanaged","pvc":{"claim":"registry-storage-pvc"}}}}' --type=merge</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="configuring-registry-storage-nutanix-addtl-resources" role="_additional-resources">
<title>Additional resources</title>
<itemizedlist>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/openshift_container_platform/4.14/html-single/scalability_and_performance/#optimizing-storage">Recommended configurable storage technology</link></simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_openshift_data_foundation/4.10/html-single/managing_and_allocating_storage_resources/index#configuring-image-registry-to-use-openshift-data-foundation_rhodf">Configuring Image Registry to use OpenShift Data Foundation</link></simpara>
</listitem>
</itemizedlist>
</section>
</section>
</chapter>
<chapter xml:id="accessing-the-registry">
<title>Accessing the registry</title>

<simpara>Use the following sections for instructions on accessing the registry, including
viewing logs and metrics, as well as securing and exposing the registry.</simpara>
<simpara>You can access the registry directly to invoke <literal>podman</literal> commands. This allows
you to push images to or pull them from the integrated registry directly using
operations like <literal>podman push</literal> or <literal>podman pull</literal>. To do so, you must be logged in
to the registry using the <literal>podman login</literal> command. The operations you can perform
depend on your user permissions, as described in the following sections.</simpara>
<section xml:id="_prerequisites">
<title>Prerequisites</title>
<itemizedlist>
<listitem>
<simpara>You have access to the cluster as a user with the <literal>cluster-admin</literal> role.</simpara>
</listitem>
<listitem>
<simpara>You must have configured an identity provider (IDP).</simpara>
</listitem>
<listitem>
<simpara>For pulling images, for example when using the <literal>podman pull</literal> command,
the user must have the <literal>registry-viewer</literal> role. To add this role, run the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc policy add-role-to-user registry-viewer &lt;user_name&gt;</programlisting>
</listitem>
<listitem>
<simpara>For writing or pushing images, for example when using the <literal>podman push</literal> command:</simpara>
<itemizedlist>
<listitem>
<simpara>The user must have the <literal>registry-editor</literal> role. To add this role, run the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc policy add-role-to-user registry-editor &lt;user_name&gt;</programlisting>
</listitem>
<listitem>
<simpara>Your cluster must have an existing project where the images can be pushed to.</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</section>
<section xml:id="registry-accessing-directly_accessing-the-registry">
<title>Accessing the registry directly from the cluster</title>
<simpara>You can access the registry from inside the cluster.</simpara>
<formalpara>
<title>Procedure</title>
<para>Access the registry from the cluster by using internal routes:</para>
</formalpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Access the node by getting the node&#8217;s name:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc get nodes</programlisting>
<programlisting language="terminal" linenumbering="unnumbered">$ oc debug nodes/&lt;node_name&gt;</programlisting>
</listitem>
<listitem>
<simpara>To enable access to tools such as <literal>oc</literal> and <literal>podman</literal> on the node, change your root directory to <literal>/host</literal>:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">sh-4.2# chroot /host</programlisting>
</listitem>
<listitem>
<simpara>Log in to the container image registry by using your access token:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">sh-4.2# oc login -u kubeadmin -p &lt;password_from_install_log&gt; https://api-int.&lt;cluster_name&gt;.&lt;base_domain&gt;:6443</programlisting>
<programlisting language="terminal" linenumbering="unnumbered">sh-4.2# podman login -u kubeadmin -p $(oc whoami -t) image-registry.openshift-image-registry.svc:5000</programlisting>
<simpara>You should see a message confirming login, such as:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">Login Succeeded!</programlisting>
<note>
<simpara>You can pass any value for the user name; the token contains all necessary
information. Passing a user name that contains colons will result in a login
failure.</simpara>
<simpara>Since the Image Registry Operator creates the route, it will likely be similar to
<literal>default-route-openshift-image-registry.&lt;cluster_name&gt;</literal>.</simpara>
</note>
</listitem>
<listitem>
<simpara>Perform <literal>podman pull</literal> and <literal>podman push</literal> operations against your registry:</simpara>
<important>
<simpara>You can pull arbitrary images, but if you have the <emphasis role="strong">system:registry</emphasis> role
added, you can only push images to the registry in your project.</simpara>
</important>
<simpara>In the following examples, use:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="50*"/>
<colspec colname="col_2" colwidth="50*"/>
<thead>
<row>
<entry align="left" valign="top">Component</entry>
<entry align="left" valign="top">Value</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">&lt;registry_ip&gt;</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>172.30.124.220</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">&lt;port&gt;</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>5000</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">&lt;project&gt;</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>openshift</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">&lt;image&gt;</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><literal>image</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">&lt;tag&gt;</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>omitted (defaults to <literal>latest</literal>)</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Pull an arbitrary image:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">sh-4.2# podman pull &lt;name.io&gt;/&lt;image&gt;</programlisting>
</listitem>
<listitem>
<simpara>Tag the new image with the form <literal>&lt;registry_ip&gt;:&lt;port&gt;/&lt;project&gt;/&lt;image&gt;</literal>.
The project name must appear in this pull specification for OpenShift Container Platform to
correctly place and later access the image in the registry:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">sh-4.2# podman tag &lt;name.io&gt;/&lt;image&gt; image-registry.openshift-image-registry.svc:5000/openshift/&lt;image&gt;</programlisting>
<note>
<simpara>You must have the <literal>system:image-builder</literal> role for the specified
project, which allows the user to write or push an image. Otherwise, the
<literal>podman push</literal> in the next step will fail. To test, you can create a new project
to push the image.</simpara>
</note>
</listitem>
<listitem>
<simpara>Push the newly tagged image to your registry:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">sh-4.2# podman push image-registry.openshift-image-registry.svc:5000/openshift/&lt;image&gt;</programlisting>
<note>
<simpara>When pushing images to the internal registry, the repository name must use the <literal>&lt;project&gt;/&lt;name&gt;</literal> format. Using multiple project levels in the repository name results in an authentication error.</simpara>
</note>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
</section>
<section xml:id="checking-the-status-of-registry-pods_accessing-the-registry">
<title>Checking the status of the registry pods</title>
<simpara>As a cluster administrator,
you can list the image registry pods running in the <literal>openshift-image-registry</literal> project and check their status.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have access to the cluster as a user with the <literal>cluster-admin</literal> role.</simpara>
</listitem>
</itemizedlist>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>List the pods in the <literal>openshift-image-registry</literal> project and view their status:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc get pods -n openshift-image-registry</programlisting>
<formalpara>
<title>Example output</title>
<para>
<programlisting language="terminal" linenumbering="unnumbered">NAME READY STATUS RESTARTS AGE
cluster-image-registry-operator-764bd7f846-qqtpb 1/1 Running 0 78m
image-registry-79fb4469f6-llrln 1/1 Running 0 77m
node-ca-hjksc 1/1 Running 0 73m
node-ca-tftj6 1/1 Running 0 77m
node-ca-wb6ht 1/1 Running 0 77m
node-ca-zvt9q 1/1 Running 0 74m</programlisting>
</para>
</formalpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="registry-viewing-logs_accessing-the-registry">
<title>Viewing registry logs</title>
<simpara>You can view the logs for the registry by using the <literal>oc logs</literal> command.</simpara>
<itemizedlist>
<title>Procedure</title>
<listitem>
<simpara>Use the <literal>oc logs</literal> command with deployments to view the logs for the container
image registry:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc logs deployments/image-registry -n openshift-image-registry</programlisting>
<formalpara>
<title>Example output</title>
<para>
<programlisting language="terminal" linenumbering="unnumbered">2015-05-01T19:48:36.300593110Z time="2015-05-01T19:48:36Z" level=info msg="version=v2.0.0+unknown"
2015-05-01T19:48:36.303294724Z time="2015-05-01T19:48:36Z" level=info msg="redis not configured" instance.id=9ed6c43d-23ee-453f-9a4b-031fea646002
2015-05-01T19:48:36.303422845Z time="2015-05-01T19:48:36Z" level=info msg="using inmemory layerinfo cache" instance.id=9ed6c43d-23ee-453f-9a4b-031fea646002
2015-05-01T19:48:36.303433991Z time="2015-05-01T19:48:36Z" level=info msg="Using OpenShift Auth handler"
2015-05-01T19:48:36.303439084Z time="2015-05-01T19:48:36Z" level=info msg="listening on :5000" instance.id=9ed6c43d-23ee-453f-9a4b-031fea646002</programlisting>
</para>
</formalpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="registry-accessing-metrics_accessing-the-registry">
<title>Accessing registry metrics</title>
<simpara>The OpenShift Container Registry provides an endpoint for
<link xlink:href="https://prometheus.io/docs/introduction/overview/">Prometheus metrics</link>.
Prometheus is a stand-alone, open source systems monitoring and alerting
toolkit.</simpara>
<simpara>The metrics are exposed at the <emphasis role="strong"><emphasis>/extensions/v2/metrics</emphasis></emphasis> path of the registry
endpoint.</simpara>
<formalpara>
<title>Procedure</title>
<para>You can access the metrics by running a metrics query using a cluster role.</para>
</formalpara>
<simpara><emphasis role="strong">Cluster role</emphasis></simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Create a cluster role if you do not already have one to access the metrics:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ cat &lt;&lt;EOF | oc create -f -
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-scraper
rules:
- apiGroups:
  - image.openshift.io
  resources:
  - registry/metrics
  verbs:
  - get
EOF</programlisting>
</listitem>
<listitem>
<simpara>Add this role to a user, run the following command:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc adm policy add-cluster-role-to-user prometheus-scraper &lt;username&gt;</programlisting>
</listitem>
</orderedlist>
<simpara><emphasis role="strong">Metrics query</emphasis></simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Get the user token.</simpara>
<programlisting language="terminal" linenumbering="unnumbered">openshift:
$ oc whoami -t</programlisting>
</listitem>
<listitem>
<simpara>Run a metrics query in node or inside a pod, for example:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ curl --insecure -s -u &lt;user&gt;:&lt;secret&gt; \ <co xml:id="CO20-1"/>
    https://image-registry.openshift-image-registry.svc:5000/extensions/v2/metrics | grep imageregistry | head -n 20</programlisting>
<formalpara>
<title>Example output</title>
<para>
<programlisting language="terminal" linenumbering="unnumbered"># HELP imageregistry_build_info A metric with a constant '1' value labeled by major, minor, git commit &amp; git version from which the image registry was built.
# TYPE imageregistry_build_info gauge
imageregistry_build_info{gitCommit="9f72191",gitVersion="v3.11.0+9f72191-135-dirty",major="3",minor="11+"} 1
# HELP imageregistry_digest_cache_requests_total Total number of requests without scope to the digest cache.
# TYPE imageregistry_digest_cache_requests_total counter
imageregistry_digest_cache_requests_total{type="Hit"} 5
imageregistry_digest_cache_requests_total{type="Miss"} 24
# HELP imageregistry_digest_cache_scoped_requests_total Total number of scoped requests to the digest cache.
# TYPE imageregistry_digest_cache_scoped_requests_total counter
imageregistry_digest_cache_scoped_requests_total{type="Hit"} 33
imageregistry_digest_cache_scoped_requests_total{type="Miss"} 44
# HELP imageregistry_http_in_flight_requests A gauge of requests currently being served by the registry.
# TYPE imageregistry_http_in_flight_requests gauge
imageregistry_http_in_flight_requests 1
# HELP imageregistry_http_request_duration_seconds A histogram of latencies for requests to the registry.
# TYPE imageregistry_http_request_duration_seconds summary
imageregistry_http_request_duration_seconds{method="get",quantile="0.5"} 0.01296087
imageregistry_http_request_duration_seconds{method="get",quantile="0.9"} 0.014847248
imageregistry_http_request_duration_seconds{method="get",quantile="0.99"} 0.015981195
imageregistry_http_request_duration_seconds_sum{method="get"} 12.260727916000022</programlisting>
</para>
</formalpara>
<calloutlist>
<callout arearefs="CO20-1">
<para>The <literal>&lt;user&gt;</literal> object can be arbitrary, but <literal>&lt;secret&gt;</literal> tag must use the user token.</para>
</callout>
</calloutlist>
</listitem>
</orderedlist>
</section>
<section xml:id="accessing-the-registry-additional-resources" role="_additional-resources">
<title>Additional resources</title>
<itemizedlist>
<listitem>
<simpara>For more information on allowing pods in a project to reference images in another project, see <link xlink:href="https://access.redhat.com/documentation/en-us/openshift_container_platform/4.14/html-single/images/#images-allow-pods-to-reference-images-across-projects_using-image-pull-secrets">Allowing pods to reference images across projects</link>.</simpara>
</listitem>
<listitem>
<simpara>A <literal>kubeadmin</literal> can access the registry until deleted. See
<link xlink:href="https://access.redhat.com/documentation/en-us/openshift_container_platform/4.14/html-single/authentication_and_authorization/#">Removing the kubeadmin user</link> for
more information.</simpara>
</listitem>
<listitem>
<simpara>For more information on configuring an identity provider, see
<link xlink:href="https://access.redhat.com/documentation/en-us/openshift_container_platform/4.14/html-single/authentication_and_authorization/#">Understanding identity provider configuration</link>.</simpara>
</listitem>
</itemizedlist>
</section>
</chapter>
<chapter xml:id="securing-exposing-registry">
<title>Exposing the registry</title>

<simpara>By default, the OpenShift image registry is secured during cluster installation
so that it serves traffic through TLS. Unlike previous versions of
OpenShift Container Platform, the registry is not exposed outside of the cluster at the time
of installation.</simpara>
<section xml:id="registry-exposing-default-registry-manually_securing-exposing-registry">
<title>Exposing a default registry manually</title>
<simpara>Instead of logging in to the default OpenShift image registry from within the cluster, you can gain external access to it by exposing it with a route. This external access enables you to log in to the registry from outside the cluster using the route address and to tag and push images to an existing project by using the route host.</simpara>
<itemizedlist>
<title>Prerequisites:</title>
<listitem>
<simpara>The following prerequisites are automatically performed:</simpara>
<itemizedlist>
<listitem>
<simpara>Deploy the Registry Operator.</simpara>
</listitem>
<listitem>
<simpara>Deploy the Ingress Operator.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>You have access to the cluster as a user with the <literal>cluster-admin</literal> role.</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Procedure</title>
<para>You can expose the route by using the <literal>defaultRoute</literal> parameter in the <literal>configs.imageregistry.operator.openshift.io</literal> resource.</para>
</formalpara>
<simpara>To expose the registry using the <literal>defaultRoute</literal>:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Set <literal>defaultRoute</literal> to <literal>true</literal>:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc patch configs.imageregistry.operator.openshift.io/cluster --patch '{"spec":{"defaultRoute":true}}' --type=merge</programlisting>
</listitem>
<listitem>
<simpara>Get the default registry route:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ HOST=$(oc get route default-route -n openshift-image-registry --template='{{ .spec.host }}')</programlisting>
</listitem>
<listitem>
<simpara>Get the certificate of the Ingress Operator:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc get secret -n openshift-ingress  router-certs-default -o go-template='{{index .data "tls.crt"}}' | base64 -d | sudo tee /etc/pki/ca-trust/source/anchors/${HOST}.crt  &gt; /dev/null</programlisting>
</listitem>
<listitem>
<simpara>Enable the cluster&#8217;s default certificate to trust the route using the following commands:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ sudo update-ca-trust enable</programlisting>
</listitem>
<listitem>
<simpara>Log in with podman using the default route:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ sudo podman login -u kubeadmin -p $(oc whoami -t) $HOST</programlisting>
</listitem>
</orderedlist>
</section>
<section xml:id="registry-exposing-secure-registry-manually_securing-exposing-registry">
<title>Exposing a secure registry manually</title>
<simpara>Instead of logging in to the OpenShift image registry from within the cluster,
you can gain external access to it by exposing it with a route. This allows you
to log in to the registry from outside the cluster using the route address, and
to tag and push images to an existing project by using the route host.</simpara>
<itemizedlist>
<title>Prerequisites:</title>
<listitem>
<simpara>The following prerequisites are automatically performed:</simpara>
<itemizedlist>
<listitem>
<simpara>Deploy the Registry Operator.</simpara>
</listitem>
<listitem>
<simpara>Deploy the Ingress Operator.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>You have access to the cluster as a user with the <literal>cluster-admin</literal> role.</simpara>
</listitem>
</itemizedlist>
<formalpara>
<title>Procedure</title>
<para>You can expose the route by using <literal>DefaultRoute</literal> parameter in the
<literal>configs.imageregistry.operator.openshift.io</literal> resource or by using custom routes.</para>
</formalpara>
<simpara>To expose the registry using <literal>DefaultRoute</literal>:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Set <literal>DefaultRoute</literal> to <literal>True</literal>:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc patch configs.imageregistry.operator.openshift.io/cluster --patch '{"spec":{"defaultRoute":true}}' --type=merge</programlisting>
</listitem>
<listitem>
<simpara>Log in with <literal>podman</literal>:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ HOST=$(oc get route default-route -n openshift-image-registry --template='{{ .spec.host }}')</programlisting>
<programlisting language="terminal" linenumbering="unnumbered">$ podman login -u kubeadmin -p $(oc whoami -t) --tls-verify=false $HOST <co xml:id="CO21-1"/></programlisting>
<calloutlist>
<callout arearefs="CO21-1">
<para><literal>--tls-verify=false</literal> is needed if the cluster&#8217;s default certificate for routes
is untrusted. You can set a custom, trusted certificate as the default
certificate with the Ingress Operator.</para>
</callout>
</calloutlist>
</listitem>
</orderedlist>
<simpara>To expose the registry using custom routes:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Create a secret with your route&#8217;s TLS keys:</simpara>
<programlisting language="terminal" linenumbering="unnumbered">$ oc create secret tls public-route-tls \
    -n openshift-image-registry \
    --cert=&lt;/path/to/tls.crt&gt; \
    --key=&lt;/path/to/tls.key&gt;</programlisting>
<simpara>This step is optional. If you do not create a secret, the route uses the
default TLS configuration from the Ingress Operator.</simpara>
</listitem>
<listitem>
<simpara>On the Registry Operator:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">spec:
  routes:
    - name: public-routes
      hostname: myregistry.mycorp.organization
      secretName: public-route-tls
...</programlisting>
<note>
<simpara>Only set <literal>secretName</literal> if you are providing a custom TLS configuration for the
registry&#8217;s route.</simpara>
</note>
</listitem>
</orderedlist>
<itemizedlist>
<title>Troubleshooting</title>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/solutions/5419501">Error creating TLS secret</link></simpara>
</listitem>
</itemizedlist>
</section>
</chapter>
</book>